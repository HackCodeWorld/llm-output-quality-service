{"task_id": "HumanEval/5", "code": "if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 439.3808898925781}
{"task_id": "HumanEval/2", "code": "return number % 1.0", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 466.7320251464844}
{"task_id": "HumanEval/7", "code": "return [x for x in strings if substring in x]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 470.8349609375}
{"task_id": "HumanEval/0", "code": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 539.26708984375}
{"task_id": "HumanEval/6", "code": "def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 540.395751953125}
{"task_id": "HumanEval/4", "code": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 557.7540283203125}
{"task_id": "HumanEval/3", "code": "balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 592.276123046875}
{"task_id": "HumanEval/1", "code": "result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 597.198974609375}
{"task_id": "HumanEval/10", "code": "if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 352.7021484375}
{"task_id": "HumanEval/8", "code": "sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 462.89300537109375}
{"task_id": "HumanEval/9", "code": "running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 469.82598876953125}
{"task_id": "HumanEval/13", "code": "while b:\n        a, b = b, a % b\n    return a", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 426.97119140625}
{"task_id": "HumanEval/11", "code": "def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 476.6888732910156}
{"task_id": "HumanEval/12", "code": "if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 490.875}
{"task_id": "HumanEval/15", "code": "return ' '.join([str(x) for x in range(n + 1)])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 470.07275390625}
{"task_id": "HumanEval/14", "code": "result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 501.4579162597656}
{"task_id": "HumanEval/16", "code": "return len(set(string.lower()))", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 436.5301208496094}
{"task_id": "HumanEval/17", "code": "note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 453.6287841796875}
{"task_id": "HumanEval/18", "code": "times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 427.17291259765625}
{"task_id": "HumanEval/20", "code": "closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 421.87310791015625}
{"task_id": "HumanEval/23", "code": "return len(string)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 411.7240905761719}
{"task_id": "HumanEval/19", "code": "value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 525.7081909179688}
{"task_id": "HumanEval/21", "code": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 484.64178466796875}
{"task_id": "HumanEval/22", "code": "return [x for x in values if isinstance(x, int)]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 510.9519958496094}
{"task_id": "HumanEval/24", "code": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 465.26885986328125}
{"task_id": "HumanEval/27", "code": "return string.swapcase()", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 372.2290954589844}
{"task_id": "HumanEval/25", "code": "import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 487.3640441894531}
{"task_id": "HumanEval/26", "code": "import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 483.2921142578125}
{"task_id": "HumanEval/31", "code": "if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 385.610107421875}
{"task_id": "HumanEval/30", "code": "return [e for e in l if e > 0]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 507.2336120605469}
{"task_id": "HumanEval/28", "code": "return ''.join(strings)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 527.719970703125}
{"task_id": "HumanEval/29", "code": "return [x for x in strings if x.startswith(prefix)]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 528.839111328125}
{"task_id": "HumanEval/33", "code": "l = list(l)\n    l[::3] = sorted(l[::3])\n    return l", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 368.59918212890625}
{"task_id": "HumanEval/32", "code": "begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 454.77294921875}
{"task_id": "HumanEval/35", "code": "m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 434.5860595703125}
{"task_id": "HumanEval/34", "code": "return sorted(list(set(l)))", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 460.9327392578125}
{"task_id": "HumanEval/36", "code": "ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 443.55511474609375}
{"task_id": "HumanEval/37", "code": "evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 449.17608642578125}
{"task_id": "HumanEval/39", "code": "import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 445.5270690917969}
{"task_id": "HumanEval/38", "code": "return encode_cyclic(encode_cyclic(s))", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 508.47625732421875}
{"task_id": "HumanEval/40", "code": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 499.5009765625}
{"task_id": "HumanEval/42", "code": "return [(e + 1) for e in l]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 425.1320495605469}
{"task_id": "HumanEval/41", "code": "return n**2", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 534.1520385742188}
{"task_id": "HumanEval/43", "code": "for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 456.3560485839844}
{"task_id": "HumanEval/44", "code": "ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 457.41583251953125}
{"task_id": "HumanEval/45", "code": "return a * h / 2.0", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 441.97296142578125}
{"task_id": "HumanEval/46", "code": "results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 450.3419494628906}
{"task_id": "HumanEval/47", "code": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 463.6640625}
{"task_id": "HumanEval/48", "code": "for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 459.909912109375}
{"task_id": "HumanEval/49", "code": "ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 532.1941528320312}
{"task_id": "HumanEval/51", "code": "return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 519.3862915039062}
{"task_id": "HumanEval/50", "code": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 602.875244140625}
{"task_id": "HumanEval/52", "code": "for e in l:\n        if e >= t:\n            return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 457.2770690917969}
{"task_id": "HumanEval/53", "code": "return x + y", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 531.5072631835938}
{"task_id": "HumanEval/54", "code": "return set(s0) == set(s1)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 566.8001098632812}
{"task_id": "HumanEval/55", "code": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 562.7791748046875}
{"task_id": "HumanEval/56", "code": "depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 482.0809326171875}
{"task_id": "HumanEval/57", "code": "if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 523.4238891601562}
{"task_id": "HumanEval/59", "code": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 478.2268981933594}
{"task_id": "HumanEval/60", "code": "return sum(range(n + 1))", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 513.6981201171875}
{"task_id": "HumanEval/58", "code": "ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 565.450927734375}
{"task_id": "HumanEval/61", "code": "depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 518.6207275390625}
{"task_id": "HumanEval/62", "code": "return [(i * x) for i, x in enumerate(xs)][1:]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 526.416748046875}
{"task_id": "HumanEval/63", "code": "if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 520.1079711914062}
{"task_id": "HumanEval/64", "code": "vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 503.671875}
{"task_id": "HumanEval/65", "code": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 617.1240844726562}
{"task_id": "HumanEval/66", "code": "if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 631.9598999023438}
{"task_id": "HumanEval/69", "code": "frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 502.5010070800781}
{"task_id": "HumanEval/67", "code": "lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 662.383056640625}
{"task_id": "HumanEval/68", "code": "if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 673.3648681640625}
{"task_id": "HumanEval/70", "code": "res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 569.8900146484375}
{"task_id": "HumanEval/72", "code": "if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 563.3458862304688}
{"task_id": "HumanEval/71", "code": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 612.1447143554688}
{"task_id": "HumanEval/73", "code": "ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 550.029052734375}
{"task_id": "HumanEval/74", "code": "l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 552.8600463867188}
{"task_id": "HumanEval/76", "code": "if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 499.13287353515625}
{"task_id": "HumanEval/77", "code": "a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 499.2730712890625}
{"task_id": "HumanEval/78", "code": "primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 464.9200439453125}
{"task_id": "HumanEval/79", "code": "return \"db\" + bin(decimal)[2:] + \"db\"", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 420.287841796875}
{"task_id": "HumanEval/80", "code": "if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 419.80194091796875}
{"task_id": "HumanEval/81", "code": "letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 327.8059997558594}
{"task_id": "HumanEval/75", "code": "def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 850.7933349609375}
{"task_id": "HumanEval/83", "code": "if n == 1: return 1\n    return 18 * (10 ** (n - 2))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 318.0959167480469}
{"task_id": "HumanEval/84", "code": "return bin(sum(int(i) for i in str(N)))[2:]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 357.4368896484375}
{"task_id": "HumanEval/82", "code": "l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 407.7639465332031}
{"task_id": "HumanEval/85", "code": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 331.0902099609375}
{"task_id": "HumanEval/86", "code": "return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 426.3760986328125}
{"task_id": "HumanEval/87", "code": "coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 447.17095947265625}
{"task_id": "HumanEval/88", "code": "return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 435.19903564453125}
{"task_id": "HumanEval/90", "code": "lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 381.9341735839844}
{"task_id": "HumanEval/89", "code": "d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 399.6729736328125}
{"task_id": "HumanEval/92", "code": "if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 400.3710632324219}
{"task_id": "HumanEval/93", "code": "vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 429.2101745605469}
{"task_id": "HumanEval/91", "code": "import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 507.171875}
{"task_id": "HumanEval/94", "code": "def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 413.63714599609375}
{"task_id": "HumanEval/95", "code": "if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\"", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 434.9660949707031}
{"task_id": "HumanEval/96", "code": "primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 368.5150146484375}
{"task_id": "HumanEval/98", "code": "count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 438.44293212890625}
{"task_id": "HumanEval/97", "code": "return abs(a % 10) * abs(b % 10)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 462.2430725097656}
{"task_id": "HumanEval/99", "code": "from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 406.2309265136719}
{"task_id": "HumanEval/100", "code": "return [n + 2*i for i in range(n)]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 428.7839050292969}
{"task_id": "HumanEval/101", "code": "if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 418.9510498046875}
{"task_id": "HumanEval/102", "code": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 417.4912109375}
{"task_id": "HumanEval/103", "code": "if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 377.3307800292969}
{"task_id": "HumanEval/104", "code": "odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 359.6298828125}
{"task_id": "HumanEval/105", "code": "dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 419.5599670410156}
{"task_id": "HumanEval/108", "code": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 374.41827392578125}
{"task_id": "HumanEval/106", "code": "ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 478.77691650390625}
{"task_id": "HumanEval/107", "code": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 470.530029296875}
{"task_id": "HumanEval/109", "code": "if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 400.8109436035156}
{"task_id": "HumanEval/110", "code": "odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 374.77301025390625}
{"task_id": "HumanEval/112", "code": "s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 453.23895263671875}
{"task_id": "HumanEval/111", "code": "dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 513.4000854492188}
{"task_id": "HumanEval/113", "code": "res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 369.70208740234375}
{"task_id": "HumanEval/114", "code": "max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 397.3450622558594}
{"task_id": "HumanEval/116", "code": "return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 445.73162841796875}
{"task_id": "HumanEval/115", "code": "return sum([math.ceil(sum(arr)/capacity) for arr in grid])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 485.0201721191406}
{"task_id": "HumanEval/117", "code": "result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 453.1002197265625}
{"task_id": "HumanEval/118", "code": "if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 423.27618408203125}
{"task_id": "HumanEval/120", "code": "if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 394.683837890625}
{"task_id": "HumanEval/119", "code": "def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 458.0299987792969}
{"task_id": "HumanEval/122", "code": "return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 364.7959289550781}
{"task_id": "HumanEval/121", "code": "return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 460.4752197265625}
{"task_id": "HumanEval/123", "code": "if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 389.50299072265625}
{"task_id": "HumanEval/126", "code": "count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 463.0830383300781}
{"task_id": "HumanEval/125", "code": "if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 471.4610595703125}
{"task_id": "HumanEval/124", "code": "try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 494.2431335449219}
{"task_id": "HumanEval/127", "code": "def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 360.301025390625}
{"task_id": "HumanEval/128", "code": "if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 428.9102478027344}
{"task_id": "HumanEval/129", "code": "n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 422.7461853027344}
{"task_id": "HumanEval/130", "code": "if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 431.89813232421875}
{"task_id": "HumanEval/131", "code": "product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 375.2560729980469}
{"task_id": "HumanEval/132", "code": "opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 391.46209716796875}
{"task_id": "HumanEval/133", "code": "import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 430.623046875}
{"task_id": "HumanEval/134", "code": "check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 460.1778869628906}
{"task_id": "HumanEval/135", "code": "ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 456.4199523925781}
{"task_id": "HumanEval/136", "code": "smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 430.85003662109375}
{"task_id": "HumanEval/137", "code": "temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 423.3288879394531}
{"task_id": "HumanEval/138", "code": "return n%2 == 0 and n >= 8", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 476.0420227050781}
{"task_id": "HumanEval/139", "code": "fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 496.694091796875}
{"task_id": "HumanEval/140", "code": "new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 443.7949523925781}
{"task_id": "HumanEval/141", "code": "suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 409.7359313964844}
{"task_id": "HumanEval/142", "code": "result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 426.0806884765625}
{"task_id": "HumanEval/143", "code": "new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 463.6468811035156}
{"task_id": "HumanEval/145", "code": "def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 362.7991638183594}
{"task_id": "HumanEval/144", "code": "a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 460.9730224609375}
{"task_id": "HumanEval/146", "code": "count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 386.647705078125}
{"task_id": "HumanEval/149", "code": "lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 377.71917724609375}
{"task_id": "HumanEval/148", "code": "planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 423.9869079589844}
{"task_id": "HumanEval/147", "code": "A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 518.88916015625}
{"task_id": "HumanEval/150", "code": "if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 379.28985595703125}
{"task_id": "HumanEval/151", "code": "return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 397.1040344238281}
{"task_id": "HumanEval/152", "code": "return [abs(x-y) for x,y in zip(game,guess)]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 411.2920837402344}
{"task_id": "HumanEval/154", "code": "l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 379.67706298828125}
{"task_id": "HumanEval/153", "code": "strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 515.3279418945312}
{"task_id": "HumanEval/155", "code": "even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 371.1891174316406}
{"task_id": "HumanEval/156", "code": "num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 364.2833251953125}
{"task_id": "HumanEval/160", "code": "expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 337.1226806640625}
{"task_id": "HumanEval/157", "code": "return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 527.711181640625}
{"task_id": "HumanEval/159", "code": "if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 453.37890625}
{"task_id": "HumanEval/158", "code": "return sorted(words, key = lambda x: (-len(set(x)), x))[0]", "syntax_ok": true, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 521.8760986328125}
{"task_id": "HumanEval/161", "code": "flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 374.7439270019531}
{"task_id": "HumanEval/162", "code": "import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 329.0712890625}
{"task_id": "HumanEval/163", "code": "lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]", "syntax_ok": false, "test_results": [{"caseId": "raw", "passed": true}], "exec_time_ms": 292.9418029785156}
{"task_id": 5, "code": "def count_ways(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1731.7430419921875}
{"task_id": 4, "code": "import heapq as hq\n\n\ndef heap_queue_largest(nums, n):\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1736.8319091796875}
{"task_id": 2, "code": "def similar_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1765.7952880859375}
{"task_id": 8, "code": "def square_nums(nums):\n    square_nums = list(map(lambda x: x**2, nums))\n    return square_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1755.6240234375}
{"task_id": 7, "code": "import re\n\n\ndef find_char_long(text):\n    return re.findall(r\"\\b\\w{4,}\\b\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1784.3968505859375}
{"task_id": 6, "code": "def is_Power_Of_Two(x):\n    return x and (not (x & (x - 1)))\n\n\ndef differ_At_One_Bit_Pos(a, b):\n    return is_Power_Of_Two(a ^ b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1768.4781494140625}
{"task_id": 3, "code": "import math\n\n\ndef is_not_prime(n):\n    result = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1769.013916015625}
{"task_id": 1, "code": "R = 3\nC = 3\n\n\ndef min_cost(cost, m, n):\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        tc[i][0] = tc[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        tc[0][j] = tc[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            tc[i][j] = min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j]\n    return tc[m][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1761.53515625}
{"task_id": 11, "code": "def remove_Occ(s, ch):\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 375.6222839355469}
{"task_id": 10, "code": "import heapq\n\n\ndef small_nnum(list1, n):\n    smallest = heapq.nsmallest(n, list1)\n    return smallest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.362060546875}
{"task_id": 9, "code": "def find_Rotations(str):\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i : i + n]\n        if str == substring:\n            return i\n    return n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 449.01824951171875}
{"task_id": 12, "code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 452.5509033203125}
{"task_id": 14, "code": "def find_Volume(l, b, h):\n    return (l * b * h) / 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 440.0589599609375}
{"task_id": 13, "code": "from collections import Counter\n\n\ndef count_common(words):\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 452.3370361328125}
{"task_id": 16, "code": "import re\n\n\ndef text_lowercase_underscore(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 446.9339904785156}
{"task_id": 15, "code": "import re\n\n\ndef split_lowerstring(text):\n    return re.findall(\"[a-z][^a-z]*\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 562.8543090820312}
{"task_id": 17, "code": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 490.7319641113281}
{"task_id": 19, "code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)\n    return len(arraynums) != len(nums_set)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 455.12200927734375}
{"task_id": 18, "code": "NO_OF_CHARS = 256\n\n\ndef str_to_list(string):\n    temp = []\n    for x in string:\n        temp.append(x)\n    return temp\n\n\ndef lst_to_string(List):\n    return \"\".join(List)\n\n\ndef get_char_count_array(string):\n    count = [0] * NO_OF_CHARS\n    for i in string:\n        count[ord(i)] += 1\n    return count\n\n\ndef remove_dirty_chars(string, second_string):\n    count = get_char_count_array(second_string)\n    ip_ind = 0\n    res_ind = 0\n    temp = \"\"\n    str_list = str_to_list(string)\n    while ip_ind != len(str_list):\n        temp = str_list[ip_ind]\n        if count[ord(temp)] == 0:\n            str_list[res_ind] = str_list[ip_ind]\n            res_ind += 1\n        ip_ind += 1\n    return lst_to_string(str_list[0:res_ind])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.7351989746094}
{"task_id": 20, "code": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    if x == 1:\n        return True\n    x = x + 1\n    p = 0\n    while x % 2 == 0:\n        x = x / 2\n        p = p + 1\n        if p == x:\n            return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 466.93182373046875}
{"task_id": 22, "code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n    return no_duplicate\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 446.238037109375}
{"task_id": 21, "code": "def multiples_of_num(m, n):\n    multiples_of_num = list(range(n, (m + 1) * n, n))\n    return list(multiples_of_num)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 497.9309997558594}
{"task_id": 23, "code": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 467.3831481933594}
{"task_id": 24, "code": "def binary_to_decimal(binary):\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.65203857421875}
{"task_id": 25, "code": "def find_Product(arr, n):\n    arr.sort()\n    prod = 1\n    for i in range(0, n, 1):\n        if arr[i - 1] != arr[i]:\n            prod = prod * arr[i]\n    return prod\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.61614990234375}
{"task_id": 30, "code": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i : i + j]):\n                result += 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 376.5630798339844}
{"task_id": 26, "code": "def check_k_elements(test_list, K):\n    res = True\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                res = False\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.6291198730469}
{"task_id": 28, "code": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 462.7471008300781}
{"task_id": 29, "code": "def get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 444.2298278808594}
{"task_id": 27, "code": "import re\n\n\ndef remove(list):\n    pattern = \"[0-9]\"\n    list = [re.sub(pattern, \"\", i) for i in list]\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 515.9080200195312}
{"task_id": 31, "code": "import collections\nimport heapq\n\n\ndef func(nums, k):\n    import collections\n\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 464.4660949707031}
{"task_id": 32, "code": "import math\n\n\ndef max_Prime_Factors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.2880859375}
{"task_id": 33, "code": "def decimal_To_Binary(N):\n    B_Number = 0\n    cnt = 0\n    while N != 0:\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.4091796875}
{"task_id": 35, "code": "def find_rect_num(n):\n    return n * (n + 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 478.02972412109375}
{"task_id": 37, "code": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 414.8108825683594}
{"task_id": 34, "code": "def find_missing(ar, N):\n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) / 2\n        mid = int(mid)\n        if ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 527.15087890625}
{"task_id": 38, "code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even / first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 425.8460998535156}
{"task_id": 36, "code": "def find_Nth_Digit(p, q, N):\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.8721313476562}
{"task_id": 39, "code": "import heapq\nfrom collections import Counter\n\n\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1:\n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1:\n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1:\n            heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 448.924072265625}
{"task_id": 41, "code": "def filter_evennumbers(nums):\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 362.11895751953125}
{"task_id": 40, "code": "from collections import Counter\nfrom itertools import chain\n\n\ndef freq_element(nums):\n    result = Counter(chain.from_iterable(nums))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.4991455078125}
{"task_id": 42, "code": "def find_Sum(arr, n):\n    return sum([x for x in arr if arr.count(x) > 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.4657897949219}
{"task_id": 43, "code": "import re\n\n\ndef text_match(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 515.52392578125}
{"task_id": 45, "code": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 494.2529296875}
{"task_id": 46, "code": "def test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 500.7279052734375}
{"task_id": 47, "code": "def compute_Last_Digit(A, B):\n    variable = 1\n    if A == B:\n        return 1\n    elif (B - A) >= 5:\n        return 0\n    else:\n        for i in range(A + 1, B + 1):\n            variable = (variable * (i % 10)) % 10\n        return variable % 10\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 478.9187927246094}
{"task_id": 44, "code": "import re\n\n\ndef text_match_string(text):\n    patterns = \"^\\w+\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 599.3359375}
{"task_id": 49, "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 488.1579895019531}
{"task_id": 48, "code": "def odd_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 527.2140502929688}
{"task_id": 50, "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 404.2120056152344}
{"task_id": 53, "code": "def check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 419.86395263671875}
{"task_id": 51, "code": "def check_equilateral(x, y, z):\n    if x == y == z:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 469.1200256347656}
{"task_id": 52, "code": "def parallelogram_area(b, h):\n    area = b * h\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 487.6968994140625}
{"task_id": 55, "code": "import math\n\n\ndef tn_gp(a, n, r):\n    tn = a * (math.pow(r, n - 1))\n    return tn\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 478.6799011230469}
{"task_id": 54, "code": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n    return my_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 541.8543701171875}
{"task_id": 56, "code": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 480.9229431152344}
{"task_id": 57, "code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    num = arr[0]\n    for i in range(1, n):\n        num = num * 10 + arr[i]\n    return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 577.27001953125}
{"task_id": 59, "code": "def is_octagonal(n):\n    return 3 * n * n - 2 * n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 390.7718505859375}
{"task_id": 58, "code": "def opposite_Signs(x, y):\n    return (x ^ y) < 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 600.5180053710938}
{"task_id": 60, "code": "def max_len_sub(arr, n):\n    mls = []\n    max = 0\n    for i in range(n):\n        mls.append(1)\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1:\n                mls[i] = mls[j] + 1\n    for i in range(n):\n        if max < mls[i]:\n            max = mls[i]\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 400.1517333984375}
{"task_id": 61, "code": "from collections import defaultdict\n\n\ndef count_Substrings(s, n):\n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord(\"0\")\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 373.3630065917969}
{"task_id": 62, "code": "def smallest_num(xs):\n    return min(xs)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 437.92010498046875}
{"task_id": 63, "code": "def max_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 479.2311096191406}
{"task_id": 64, "code": "def subject_marks(subjectmarks):\n    # subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 468.20306396484375}
{"task_id": 65, "code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 461.7772216796875}
{"task_id": 67, "code": "def bell_number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 496.6471252441406}
{"task_id": 66, "code": "def pos_count(list):\n    pos_count = 0\n    for num in list:\n        if num >= 0:\n            pos_count += 1\n    return pos_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 572.9899291992188}
{"task_id": 68, "code": "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(\n        A[i] >= A[i + 1] for i in range(len(A) - 1)\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 491.0871887207031}
{"task_id": 69, "code": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i + n] == s[n]):\n                    n += 1\n                if n == len(s):\n                    sub_set = True\n    return sub_set\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 522.5648803710938}
{"task_id": 70, "code": "def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n        if len(tuple) != k:\n            flag = 0\n            break\n    return flag\n\n\ndef get_equal(Input, k):\n    if find_equal_tuple(Input, k) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.9251098632812}
{"task_id": 71, "code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 483.24609375}
{"task_id": 72, "code": "def dif_Square(n):\n    if n % 4 != 2:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 540.4150390625}
{"task_id": 73, "code": "import re\n\n\ndef multiple_split(text):\n    return re.split(\"; |, |\\*|\\n\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 503.8869323730469}
{"task_id": 75, "code": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 542.5257568359375}
{"task_id": 74, "code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    sdict = {}\n    pset = set()\n    sset = set()\n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n    if len(pset) != len(sset):\n        return False\n    for values in sdict.values():\n        for i in range(len(values) - 1):\n            if values[i] != values[i + 1]:\n                return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 552.3209838867188}
{"task_id": 76, "code": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 543.1358642578125}
{"task_id": 77, "code": "def is_Diff(n):\n    return n % 11 == 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.9569091796875}
{"task_id": 78, "code": "def count_With_Odd_SetBits(n):\n    if n % 2 != 0:\n        return (n + 1) / 2\n    count = bin(n).count(\"1\")\n    ans = n / 2\n    if count % 2 != 0:\n        ans += 1\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.47900390625}
{"task_id": 79, "code": "def word_len(s):\n    s = s.split(\" \")\n    for word in s:\n        if len(word) % 2 != 0:\n            return True\n        else:\n            return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 459.53607177734375}
{"task_id": 80, "code": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.6791381835938}
{"task_id": 81, "code": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n    for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 484.6489562988281}
{"task_id": 82, "code": "import math\n\n\ndef volume_sphere(r):\n    volume = (4 / 3) * math.pi * r * r * r\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 440.1748046875}
{"task_id": 85, "code": "import math\n\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r * r\n    return surfacearea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 454.11181640625}
{"task_id": 86, "code": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.0130310058594}
{"task_id": 83, "code": "def get_Char(strr):\n    summ = 0\n    for i in range(len(strr)):\n        summ += ord(strr[i]) - ord(\"a\") + 1\n    if summ % 26 == 0:\n        return ord(\"z\")\n    else:\n        summ = summ % 26\n        return chr(ord(\"a\") + summ - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.23193359375}
{"task_id": 87, "code": "import collections as ct\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2, dict3))\n    return merged_dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 415.75384521484375}
{"task_id": 84, "code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 476.5613098144531}
{"task_id": 89, "code": "def closest_num(N):\n    return N - 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 404.0610656738281}
{"task_id": 88, "code": "import collections\n\n\ndef freq_count(list1):\n    freq_count = collections.Counter(list1)\n    return freq_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.94476318359375}
{"task_id": 90, "code": "def len_log(list1):\n    max = len(list1[0])\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 360.5539855957031}
{"task_id": 91, "code": "def find_substring(str1, sub_str):\n    if any(sub_str in s for s in str1):\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 372.55621337890625}
{"task_id": 92, "code": "def is_undulating(n):\n    if len(n) <= 2:\n        return False\n    for i in range(2, len(n)):\n        if n[i - 2] != n[i]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 401.34930419921875}
{"task_id": 93, "code": "def power(a, b):\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 406.544921875}
{"task_id": 94, "code": "from operator import itemgetter\n\n\ndef index_minimum(test_list):\n    res = min(test_list, key=itemgetter(1))[0]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 482.0489807128906}
{"task_id": 95, "code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst)\n    return minLength\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 510.7328796386719}
{"task_id": 96, "code": "def divisor(n):\n    for i in range(n):\n        x = len([i for i in range(1, n + 1) if not n % i])\n    return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 482.7630615234375}
{"task_id": 97, "code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.10198974609375}
{"task_id": 98, "code": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 483.3340759277344}
{"task_id": 99, "code": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 419.9180603027344}
{"task_id": 100, "code": "import sys\n\n\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num + 1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.145751953125}
{"task_id": 101, "code": "def kth_element(arr, n, k):\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] == arr[j + 1], arr[j]\n    return arr[k - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.65008544921875}
{"task_id": 103, "code": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.6037292480469}
{"task_id": 102, "code": "import re\n\n\ndef snake_to_camel(word):\n    import re\n\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.3558654785156}
{"task_id": 104, "code": "def sort_sublists(input_list):\n    result = [sorted(x, key=lambda x: x[0]) for x in input_list]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.32232666015625}
{"task_id": 105, "code": "def count(lst):\n    return sum(lst)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 402.557373046875}
{"task_id": 106, "code": "def add_lists(test_list, test_tup):\n    res = tuple(list(test_tup) + test_list)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 451.24603271484375}
{"task_id": 107, "code": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i >= 10 and i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.80816650390625}
{"task_id": 109, "code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(0, n):\n        if s[i] == \"1\":\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 347.6400451660156}
{"task_id": 108, "code": "import heapq\n\n\ndef merge_sorted_list(num1, num2, num3):\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    result = heapq.merge(num1, num2, num3)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 393.6519775390625}
{"task_id": 110, "code": "def extract_missing(test_list, strt_val, stop_val):\n    res = []\n    for sub in test_list:\n        if sub[0] > strt_val:\n            res.append((strt_val, sub[0]))\n            strt_val = sub[1]\n        if strt_val < stop_val:\n            res.append((strt_val, stop_val))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 411.284912109375}
{"task_id": 111, "code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 366.6780090332031}
{"task_id": 112, "code": "def perimeter(diameter, height):\n    return 2 * (diameter + height)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 445.7509460449219}
{"task_id": 113, "code": "def check_integer(text):\n    text = text.strip()\n    if len(text) < 1:\n        return None\n    else:\n        if all(text[i] in \"0123456789\" for i in range(len(text))):\n            return True\n        elif (text[0] in \"+-\") and all(\n            text[i] in \"0123456789\" for i in range(1, len(text))\n        ):\n            return True\n        else:\n            return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.6961669921875}
{"task_id": 115, "code": "def empty_dit(list1):\n    empty_dit = all(not d for d in list1)\n    return empty_dit\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 438.9290771484375}
{"task_id": 117, "code": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele.isalpha():\n                temp.append(ele)\n            else:\n                temp.append(float(ele))\n        res.append((temp[0], temp[1]))\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 441.5628967285156}
{"task_id": 114, "code": "from collections import Counter\n\n\ndef assign_freq(test_list):\n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 518.055908203125}
{"task_id": 116, "code": "def tuple_to_int(nums):\n    result = int(\"\".join(map(str, nums)))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.66131591796875}
{"task_id": 119, "code": "def search(arr, n):\n    XOR = 0\n    for i in range(n):\n        XOR = XOR ^ arr[i]\n    return XOR\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 427.388916015625}
{"task_id": 118, "code": "def string_to_list(string):\n    lst = list(string.split(\" \"))\n    return lst\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 473.70098876953125}
{"task_id": 121, "code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(\n        A, n - 1, sum, count\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 433.8996276855469}
{"task_id": 120, "code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1])\n    return result_max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 473.08111572265625}
{"task_id": 122, "code": "MAX = 3000\n\n\ndef smartNumber(n):\n    primes = [0] * MAX\n    result = []\n    for i in range(2, MAX):\n        if primes[i] == 0:\n            primes[i] = 1\n            j = i * 2\n            while j < MAX:\n                primes[j] -= 1\n                if (primes[j] + 3) == 0:\n                    result.append(j)\n                j = j + i\n    result.sort()\n    return result[n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.11212158203125}
{"task_id": 124, "code": "import cmath\n\n\ndef angle_complex(a, b):\n    cn = complex(a, b)\n    angle = cmath.phase(a + b)\n    return angle\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 420.47906494140625}
{"task_id": 125, "code": "def find_length(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == \"0\" else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 405.41387939453125}
{"task_id": 126, "code": "def sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 378.641845703125}
{"task_id": 127, "code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 362.8296813964844}
{"task_id": 128, "code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.0738525390625}
{"task_id": 129, "code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum(lines) for lines in my_matrix])\n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0, iSize):\n        result1 += my_matrix[i][i]\n    sum_list.append(result1)\n    result2 = 0\n    for i in range(iSize - 1, -1, -1):\n        result2 += my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list)) > 1:\n        return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 431.5960388183594}
{"task_id": 131, "code": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    return result_string\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 411.9382019042969}
{"task_id": 132, "code": "def tup_string(tup1):\n    str = \"\".join(tup1)\n    return str\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.15570068359375}
{"task_id": 130, "code": "from collections import defaultdict\n\n\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 525.0942993164062}
{"task_id": 133, "code": "def sum_negativenum(nums):\n    sum_negativenum = list(filter(lambda nums: nums < 0, nums))\n    return sum(sum_negativenum)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 491.0779113769531}
{"task_id": 134, "code": "def check_last(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum = _sum + arr[i]\n    if p == 1:\n        if _sum % 2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    return \"EVEN\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 485.2049255371094}
{"task_id": 135, "code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 499.6931457519531}
{"task_id": 136, "code": "def cal_electbill(units):\n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    total = amount + surcharge\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 460.86383056640625}
{"task_id": 138, "code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n % 2 == 1:\n        return False\n    else:\n        return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 366.1608581542969}
{"task_id": 137, "code": "from array import array\n\n\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.1159362792969}
{"task_id": 139, "code": "def circle_circumference(r):\n    perimeter = 2 * 3.1415 * r\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.336181640625}
{"task_id": 140, "code": "def extract_singly(test_list):\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if not ele in temp:\n                temp.add(ele)\n                res.append(ele)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 423.716064453125}
{"task_id": 141, "code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi + 1 : len(nums)]\n        nums = nums[arr_len - 1 :: -1] + nums[arr_len : len(nums)]\n        arr_len -= 1\n    return nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.98675537109375}
{"task_id": 142, "code": "def count_samepair(list1, list2, list3):\n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.8941650390625}
{"task_id": 143, "code": "def find_lists(Input):\n    if isinstance(Input, list):\n        return 1\n    else:\n        return len(Input)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 502.6590881347656}
{"task_id": 144, "code": "def sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 466.4921875}
{"task_id": 146, "code": "def ascii_value_string(str1):\n    for i in range(len(str1)):\n        return ord(str1[i])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 455.94287109375}
{"task_id": 148, "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\n\ndef closest(x):\n    ans = 0\n    while ans * 10 + 9 <= x:\n        ans = ans * 10 + 9\n    return ans\n\n\ndef sum_digits_twoparts(N):\n    A = closest(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 370.8140869140625}
{"task_id": 145, "code": "def max_Abs_Diff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return maxEle - minEle\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 573.5099487304688}
{"task_id": 147, "code": "def max_path_sum(tri, m, n):\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            if tri[i + 1][j] > tri[i + 1][j + 1]:\n                tri[i][j] += tri[i + 1][j]\n            else:\n                tri[i][j] += tri[i + 1][j + 1]\n    return tri[0][0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 451.8778381347656}
{"task_id": 149, "code": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if (arr[i] == arr[j] + 1) or (arr[i] == arr[j] - 1):\n                dp[i] = max(dp[i], dp[j] + 1)\n    result = 1\n    for i in range(n):\n        if result < dp[i]:\n            result = dp[i]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 368.75177001953125}
{"task_id": 150, "code": "def does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    if (b - a) * c > 0 and (b - a) % c == 0:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 466.1119079589844}
{"task_id": 151, "code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 462.62310791015625}
{"task_id": 152, "code": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\n\n\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.60198974609375}
{"task_id": 153, "code": "def parabola_vertex(a, b, c):\n    vertex = ((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a)))\n    return vertex\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 503.8230285644531}
{"task_id": 154, "code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 490.1340026855469}
{"task_id": 155, "code": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 491.8992614746094}
{"task_id": 156, "code": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 448.8789978027344}
{"task_id": 158, "code": "def min_Ops(arr, n, k):\n    max1 = max(arr)\n    res = 0\n    for i in range(0, n):\n        if (max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += (max1 - arr[i]) / k\n    return int(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 452.5921325683594}
{"task_id": 157, "code": "from itertools import groupby\n\n\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 499.7310791015625}
{"task_id": 159, "code": "def month_season(month, days):\n    if month in (\"January\", \"February\", \"March\"):\n        season = \"winter\"\n    elif month in (\"April\", \"May\", \"June\"):\n        season = \"spring\"\n    elif month in (\"July\", \"August\", \"September\"):\n        season = \"summer\"\n    else:\n        season = \"autumn\"\n    if (month == \"March\") and (days > 19):\n        season = \"spring\"\n    elif (month == \"June\") and (days > 20):\n        season = \"summer\"\n    elif (month == \"September\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"October\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"November\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"December\") and (days > 20):\n        season = \"winter\"\n    return season\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 433.5269775390625}
{"task_id": 160, "code": "def solution(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (\"x = \", i, \", y = \", int((n - (i * a)) / b))\n            return 0\n        i = i + 1\n    return \"No solution\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 409.43096923828125}
{"task_id": 161, "code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 514.5218505859375}
{"task_id": 162, "code": "def sum_series(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 510.15997314453125}
{"task_id": 163, "code": "from math import pi, tan\n\n\ndef area_polygon(s, l):\n    area = s * (l**2) / (4 * tan(pi / s))\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 480.3509826660156}
{"task_id": 164, "code": "import math\n\n\ndef divSum(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + math.floor(n / i)\n        i += 1\n    return sum\n\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 439.2812194824219}
{"task_id": 165, "code": "def count_char_position(str1):\n    count_chars = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord(\"A\")) or (i == ord(str1[i]) - ord(\"a\")):\n            count_chars += 1\n    return count_chars\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 435.30084228515625}
{"task_id": 167, "code": "def next_Power_Of_2(n):\n    count = 0\n    if n and not (n & (n - 1)):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.7148132324219}
{"task_id": 166, "code": "def find_even_Pair(A, N):\n    evenPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                evenPair += 1\n    return evenPair\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 464.2198181152344}
{"task_id": 170, "code": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    for i in range(m, n + 1, 1):\n        sum_range += list1[i]\n    return sum_range\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 444.02789306640625}
{"task_id": 168, "code": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 509.5281677246094}
{"task_id": 169, "code": "def get_pell(n):\n    if n <= 2:\n        return n\n    a = 1\n    b = 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.3001708984375}
{"task_id": 171, "code": "import math\n\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.1038513183594}
{"task_id": 172, "code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\" and s[i + 1] == \"t\" and s[i + 2] == \"d\":\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.3031005859375}
{"task_id": 174, "code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.7769470214844}
{"task_id": 173, "code": "import re\n\n\ndef remove_splchar(text):\n    pattern = re.compile(\"[\\W_]+\")\n    return pattern.sub(\"\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 522.1381225585938}
{"task_id": 175, "code": "def is_valid_parenthese(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthese in str1:\n        if parenthese in pchar:\n            stack.append(parenthese)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n            return False\n    return len(stack) == 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.3689575195312}
{"task_id": 176, "code": "def perimeter_triangle(a, b, c):\n    perimeter = a + b + c\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.8380737304688}
{"task_id": 177, "code": "def answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    else:\n        return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.98828125}
{"task_id": 179, "code": "def is_num_keith(x):\n    terms = []\n    temp = x\n    n = 0\n    while temp > 0:\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while next_term < x:\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return next_term == x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 523.2610473632812}
{"task_id": 178, "code": "import re\n\n\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return \"Matched!\"\n        else:\n            return \"Not Matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 604.8218994140625}
{"task_id": 181, "code": "def common_prefix_util(str1, str2):\n    result = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.779296875}
{"task_id": 180, "code": "from math import acos, cos, radians, sin\n\n\ndef distance_lat_long(slat, slon, elat, elon):\n    dist = 6371.01 * acos(\n        sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon)\n    )\n    return dist\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 607.5799560546875}
{"task_id": 182, "code": "import re\n\n\ndef find_character(string):\n    uppercase_characters = re.findall(r\"[A-Z]\", string)\n    lowercase_characters = re.findall(r\"[a-z]\", string)\n    numerical_characters = re.findall(r\"[0-9]\", string)\n    special_characters = re.findall(r\"[, .!?]\", string)\n    return (\n        uppercase_characters,\n        lowercase_characters,\n        numerical_characters,\n        special_characters,\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 599.1480102539062}
{"task_id": 184, "code": "def greater_specificnum(list, num):\n    greater_specificnum = all(x >= num for x in list)\n    return greater_specificnum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 638.35693359375}
{"task_id": 183, "code": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 658.2150268554688}
{"task_id": 185, "code": "def parabola_focus(a, b, c):\n    focus = ((-b / (2 * a)), (((4 * a * c) - (b * b) + 1) / (4 * a)))\n    return focus\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.5428466796875}
{"task_id": 188, "code": "def prod_Square(n):\n    for i in range(2, (n) + 1):\n        if i * i < (n + 1):\n            for j in range(2, n + 1):\n                if (i * i * j * j) == n:\n                    return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.9730224609375}
{"task_id": 187, "code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m - 1] == Y[n - 1]:\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    else:\n        return max(\n            longest_common_subsequence(X, Y, m, n - 1),\n            longest_common_subsequence(X, Y, m - 1, n),\n        )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 586.8139038085938}
{"task_id": 186, "code": "import re\n\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return \"Matched!\"\n        else:\n            return \"Not Matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 655.36376953125}
{"task_id": 189, "code": "def first_Missing_Positive(arr, n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return i + 1\n    return n + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 514.1207885742188}
{"task_id": 190, "code": "def count_Intgral_Points(x1, y1, x2, y2):\n    return (y2 - y1 - 1) * (x2 - x1 - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 585.072998046875}
{"task_id": 191, "code": "def check_monthnumber(monthname3):\n    if (\n        monthname3 == \"April\"\n        or monthname3 == \"June\"\n        or monthname3 == \"September\"\n        or monthname3 == \"November\"\n    ):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 609.0936889648438}
{"task_id": 192, "code": "def check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str:\n        if i.isalpha():\n            flag_l = True\n        if i.isdigit():\n            flag_n = True\n    return flag_l and flag_n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 499.8641052246094}
{"task_id": 123, "code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "syntax_ok": true, "test_results": [], "exec_time_ms": 5388.32177734375}
{"task_id": 193, "code": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 638.56103515625}
{"task_id": 195, "code": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 684.9097900390625}
{"task_id": 194, "code": "def octal_To_Decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 729.4068603515625}
{"task_id": 196, "code": "def remove_tuples(test_list, K):\n    res = [ele for ele in test_list if len(ele) != K]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 603.0359497070312}
{"task_id": 197, "code": "def find_exponentio(test_tup1, test_tup2):\n    res = tuple(ele1**ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 764.4469604492188}
{"task_id": 200, "code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 649.9989013671875}
{"task_id": 198, "code": "import math\n\n\ndef largest_triangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b)\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 769.3428955078125}
{"task_id": 201, "code": "def chkList(lst):\n    return len(set(lst)) == 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 571.3748779296875}
{"task_id": 199, "code": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0:\n            res = i\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 792.2620849609375}
{"task_id": 203, "code": "def hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    setBits = 0\n    while x > 0:\n        setBits += x & 1\n        x >>= 1\n    return setBits\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 565.7479858398438}
{"task_id": 202, "code": "def remove_even(str1):\n    str2 = \"\"\n    for i in range(1, len(str1) + 1):\n        if i % 2 != 0:\n            str2 = str2 + str1[i - 1]\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 694.5028076171875}
{"task_id": 204, "code": "def count(s, c):\n    res = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            res = res + 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 700.114013671875}
{"task_id": 205, "code": "def inversion_elements(test_tup):\n    res = tuple(list(map(lambda x: ~x, list(test_tup))))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 470.0605773925781}
{"task_id": 206, "code": "def concatenate_elements(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 569.5540771484375}
{"task_id": 207, "code": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for k in range(n + 1)] for l in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[n][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 554.0940551757812}
{"task_id": 209, "code": "import heapq as hq\n\n\ndef heap_replace(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 595.3078002929688}
{"task_id": 208, "code": "import re\n\n\ndef is_decimal(num):\n    num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = num_fetch.search(num)\n    return bool(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 657.2120361328125}
{"task_id": 210, "code": "import re\n\n\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r\"[^a-zA-Z0-9.]\")\n    string = get_char.search(string)\n    return not bool(string)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 688.1651611328125}
{"task_id": 211, "code": "def count_Num(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 614.613037109375}
{"task_id": 213, "code": "def concatenate_strings(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.5518798828125}
{"task_id": 212, "code": "import math\n\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i * i)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 585.540283203125}
{"task_id": 214, "code": "import math\n\n\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.1240234375}
{"task_id": 215, "code": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n\n    return [x for g in alist for x, R in aux(g) for i in R]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 557.5108642578125}
{"task_id": 216, "code": "def check_subset_list(list1, list2):\n    l1, l2 = list1[0], list2[0]\n    exist = True\n    for i in list2:\n        if i not in list1:\n            exist = False\n    return exist\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 488.5609130859375}
{"task_id": 217, "code": "def first_Repeated_Char(str):\n    h = {}\n    for ch in str:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return \"\\0\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 521.0211181640625}
{"task_id": 218, "code": "import math\n\n\ndef min_Operations(A, B):\n    if A > B:\n        swap(A, B)\n    B = B // math.gcd(A, B)\n    return B - 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 494.60601806640625}
{"task_id": 219, "code": "def extract_min_max(test_tup, K):\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n            res.append(val)\n    res = tuple(res)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 509.36700439453125}
{"task_id": 221, "code": "def first_even(nums):\n    first_even = next((el for el in nums if el % 2 == 0), -1)\n    return first_even\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.6920166015625}
{"task_id": 222, "code": "def check_type(test_tuple):\n    res = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            res = False\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 487.49591064453125}
{"task_id": 220, "code": "import re\n\n\ndef replace_max_specialchar(text, n):\n    return re.sub(\"[ ,.]\", \":\", text, n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 692.3980712890625}
{"task_id": 224, "code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 530.6551513671875}
{"task_id": 223, "code": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    if ((i + n // 2) <= (n - 1)) and arr[i + n // 2] == x:\n        return True\n    else:\n        return False\n\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 611.9108276367188}
{"task_id": 225, "code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[high]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 570.4419555664062}
{"task_id": 226, "code": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.6132202148438}
{"task_id": 227, "code": "def min_of_three(a, b, c):\n    if (a <= b) and (a <= c):\n        smallest = a\n    elif (b <= a) and (b <= c):\n        smallest = b\n    else:\n        smallest = c\n    return smallest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.5591430664062}
{"task_id": 228, "code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if new_num == 0:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 484.4519958496094}
{"task_id": 230, "code": "def replace_blank(str1, char):\n    str2 = str1.replace(\" \", char)\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.6379699707031}
{"task_id": 229, "code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j = j + 1\n    return arr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 547.811767578125}
{"task_id": 231, "code": "def max_sum(tri, n):\n    if n > 1:\n        tri[1][1] = tri[1][1] + tri[0][0]\n        tri[1][0] = tri[1][0] + tri[0][0]\n    for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i - 1][0]\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]\n        for j in range(1, i):\n            if tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]:\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]\n            else:\n                tri[i][j] = tri[i][j] + tri[i - 1][j]\n    return max(tri[n - 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.3927612304688}
{"task_id": 232, "code": "import heapq\n\n\ndef larg_nnum(list1, n):\n    largest = heapq.nlargest(n, list1)\n    return largest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.65606689453125}
{"task_id": 233, "code": "def lateralsuface_cylinder(r, h):\n    lateralsurface = 2 * 3.1415 * r * h\n    return lateralsurface\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 617.2440185546875}
{"task_id": 234, "code": "def volume_cube(l):\n    volume = l * l * l\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 566.1580810546875}
{"task_id": 235, "code": "def even_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.443115234375}
{"task_id": 236, "code": "def No_of_Triangle(N, K):\n    if N < K:\n        return -1\n    else:\n        Tri_up = 0\n        Tri_up = ((N - K + 1) * (N - K + 2)) // 2\n        Tri_down = 0\n        Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) // 2\n        return Tri_up + Tri_down\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 492.32196044921875}
{"task_id": 239, "code": "def get_total_number_of_sequences(m, n):\n    T = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif i < j:\n                T[i][j] = 0\n            elif j == 1:\n                T[i][j] = i\n            else:\n                T[i][j] = T[i - 1][j] + T[i // 2][j - 1]\n    return T[m][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.10797119140625}
{"task_id": 240, "code": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    replace_list = list1\n    return replace_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 470.65185546875}
{"task_id": 237, "code": "from collections import Counter\n\n\ndef check_occurences(test_list):\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 662.47607421875}
{"task_id": 238, "code": "def number_of_substrings(str):\n    str_len = len(str)\n    return int(str_len * (str_len + 1) / 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 661.4217529296875}
{"task_id": 241, "code": "def array_3d(m, n, o):\n    array_3d = [[[\"*\" for col in range(m)] for col in range(n)] for row in range(o)]\n    return array_3d\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 611.2699584960938}
{"task_id": 244, "code": "import math\n\n\ndef next_Perfect_Square(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 546.0829467773438}
{"task_id": 242, "code": "def count_charac(str1):\n    total = 0\n    for i in str1:\n        total = total + 1\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 663.5399169921875}
{"task_id": 243, "code": "def sort_on_occurence(lst):\n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    return [(i, *dict.fromkeys(j), len(j)) for i, j in dct.items()]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 614.747314453125}
{"task_id": 245, "code": "def max_sum(arr, n):\n    MSIBS = arr[:]\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                MSIBS[i] = MSIBS[j] + arr[i]\n    MSDBS = arr[:]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:\n                MSDBS[-i] = MSDBS[-j] + arr[-i]\n    max_sum = float(\"-Inf\")\n    for i, j, k in zip(MSIBS, MSDBS, arr):\n        max_sum = max(max_sum, i + j - k)\n    return max_sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 560.994140625}
{"task_id": 246, "code": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 624.8948364257812}
{"task_id": 247, "code": "def lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    return L[0][n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 613.1441650390625}
{"task_id": 248, "code": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 673.6679077148438}
{"task_id": 250, "code": "def count_X(tup, x):\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 462.971923828125}
{"task_id": 251, "code": "def insert_element(list, element):\n    list = [v for elt in list for v in (element, elt)]\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 496.9241638183594}
{"task_id": 253, "code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 375.7359924316406}
{"task_id": 252, "code": "import cmath\n\n\ndef convert(numbers):\n    num = cmath.polar(numbers)\n    return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.5110473632812}
{"task_id": 249, "code": "def intersection_array(array_nums1, array_nums2):\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 632.7969970703125}
{"task_id": 255, "code": "from itertools import combinations_with_replacement\n\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 573.467041015625}
{"task_id": 257, "code": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 477.6239318847656}
{"task_id": 256, "code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 554.23876953125}
{"task_id": 254, "code": "import re\n\n\ndef words_ae(text):\n    list = re.findall(\"[ae]\\w+\", text)\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "errors": [""]}], "exec_time_ms": 689.63720703125}
{"task_id": 258, "code": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: (x % 2 != 0), array_nums)))\n    return count_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 480.234130859375}
{"task_id": 259, "code": "def maximize_elements(test_tup1, test_tup2):\n    res = tuple(\n        tuple(max(a, b) for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 491.26483154296875}
{"task_id": 260, "code": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 487.1477966308594}
{"task_id": 261, "code": "def division_elements(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.9837646484375}
{"task_id": 262, "code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.0428466796875}
{"task_id": 264, "code": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.9209289550781}
{"task_id": 263, "code": "def merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.0469970703125}
{"task_id": 266, "code": "def lateralsurface_cube(l):\n    LSA = 4 * (l * l)\n    return LSA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.4329528808594}
{"task_id": 265, "code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 446.2850036621094}
{"task_id": 267, "code": "def square_Sum(n):\n    return int(n * (4 * n * n - 1) / 3)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 382.3158874511719}
{"task_id": 268, "code": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 461.5638122558594}
{"task_id": 269, "code": "def ascii_value(k):\n    ch = k\n    return ord(ch)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 449.8848876953125}
{"task_id": 270, "code": "def sum_even_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 380.5391845703125}
{"task_id": 274, "code": "import math\n\n\ndef even_binomial_Coeff_Sum(n):\n    return 1 << (n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 368.84307861328125}
{"task_id": 271, "code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j * j)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 440.1700439453125}
{"task_id": 272, "code": "def rear_extract(test_list):\n    res = [lis[-1] for lis in test_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 457.0968017578125}
{"task_id": 275, "code": "import math as mt\n\n\ndef get_Position(a, n, m):\n    for i in range(n):\n        a[i] = a[i] // m + (a[i] % m != 0)\n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n    return result + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 407.0289001464844}
{"task_id": 273, "code": "def substract_elements(test_tup1, test_tup2):\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 474.8141784667969}
{"task_id": 276, "code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r * r * h\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 393.11981201171875}
{"task_id": 277, "code": "def dict_filter(dict, n):\n    result = {key: value for (key, value) in dict.items() if value >= n}\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 458.3652038574219}
{"task_id": 278, "code": "def count_first_elements(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 403.33294677734375}
{"task_id": 279, "code": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 502.3889465332031}
{"task_id": 283, "code": "def validate(n):\n    for i in range(10):\n        temp = n\n        count = 0\n        while temp:\n            if temp % 10 == i:\n                count += 1\n            if count > i:\n                return False\n            temp //= 10\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 561.3181762695312}
{"task_id": 281, "code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 653.5599365234375}
{"task_id": 284, "code": "def check_element(list, element):\n    check_element = all(v == element for v in list)\n    return check_element\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 558.4592895507812}
{"task_id": 282, "code": "def sub_list(nums1, nums2):\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 651.5068969726562}
{"task_id": 280, "code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 705.6047973632812}
{"task_id": 286, "code": "def max_sub_array_sum_repeated(a, n, k):\n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 598.3810424804688}
{"task_id": 285, "code": "import re\n\n\ndef text_match_two_three(text):\n    patterns = \"ab{2,3}\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 697.7219848632812}
{"task_id": 287, "code": "def square_Sum(n):\n    return int(2 * n * (n + 1) * (2 * n + 1) / 3)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.66900634765625}
{"task_id": 288, "code": "def modular_inverse(arr, N, P):\n    current_element = 0\n    for i in range(0, N):\n        if (arr[i] * arr[i]) % P == 1:\n            current_element = current_element + 1\n    return current_element\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 450.0060119628906}
{"task_id": 291, "code": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 423.9518737792969}
{"task_id": 290, "code": "def max_length(list1):\n    max_length = max(len(x) for x in list1)\n    max_list = max((x) for x in list1)\n    return (max_length, max_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 509.6042175292969}
{"task_id": 292, "code": "def find(n, m):\n    q = n // m\n    return q\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.452880859375}
{"task_id": 289, "code": "def odd_Days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if hund1:\n        ordd += hund1\n        leap -= hund1\n    if hund4:\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 561.84814453125}
{"task_id": 293, "code": "import math\n\n\ndef otherside_rightangle(w, h):\n    s = math.sqrt((w * w) + (h * h))\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 500.9200439453125}
{"task_id": 295, "code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i) == 0:\n            divisors.append(i)\n    return sum(divisors)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 469.48028564453125}
{"task_id": 294, "code": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    return max_val\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 479.17889404296875}
{"task_id": 296, "code": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.4892272949219}
{"task_id": 297, "code": "def flatten_list(list1):\n    result_list = []\n    if not list1:\n        return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num:\n            stack.append(c_num)\n        if isinstance(next, list):\n            if next:\n                stack.append(list(next))\n        else:\n            result_list.append(next)\n    result_list.reverse()\n    return result_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.54876708984375}
{"task_id": 298, "code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 482.0408935546875}
{"task_id": 300, "code": "def count_binary_seq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) / r\n        res += nCr * nCr\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 474.61724853515625}
{"task_id": 299, "code": "from collections import defaultdict\n\n\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.1371459960938}
{"task_id": 301, "code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 400.7859191894531}
{"task_id": 303, "code": "import sys\n\n\ndef solve(a, n):\n    mx = -sys.maxsize - 1\n    for j in range(1, n):\n        if mx > a[j]:\n            return False\n        mx = max(mx, a[j - 1])\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 470.68212890625}
{"task_id": 302, "code": "def set_Bit_Number(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = int(n / 2)\n    while n > 0:\n        n = int(n / 2)\n        msb += 1\n    return 1 << msb\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 485.2380676269531}
{"task_id": 304, "code": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations - 1, -1, -1):\n        left = ranges[i][0]\n        right = ranges[i][1]\n        if left <= index and right >= index:\n            if index == left:\n                index = right\n            else:\n                index = index - 1\n    return arr[index]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.9239501953125}
{"task_id": 305, "code": "import re\n\n\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 492.2931213378906}
{"task_id": 306, "code": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        if a[i] > a[0]:\n            dp[0][i] = a[i] + a[0]\n        else:\n            dp[0][i] = a[i]\n    for i in range(1, n):\n        for j in range(n):\n            if a[j] > a[i] and j > i:\n                if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                    dp[i][j] = dp[i - 1][i] + a[j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[index][k]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 427.82305908203125}
{"task_id": 307, "code": "from copy import deepcopy\n\n\ndef colon_tuplex(tuplex, m, n):\n    tuplex_colon = deepcopy(tuplex)\n    tuplex_colon[m].append(n)\n    return tuplex_colon\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 468.8219909667969}
{"task_id": 308, "code": "def large_product(nums1, nums2, N):\n    result = sorted([x * y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.1269836425781}
{"task_id": 309, "code": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 479.9008483886719}
{"task_id": 310, "code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace())\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.7838439941406}
{"task_id": 311, "code": "def set_left_most_unset_bit(n):\n    if not (n & (n + 1)):\n        return n\n    pos, temp, count = 0, n, 0\n    while temp:\n        if not (temp & 1):\n            pos = count\n        count += 1\n        temp >>= 1\n    return n | (1 << (pos))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 463.3316955566406}
{"task_id": 312, "code": "import math\n\n\ndef volume_cone(r, h):\n    volume = (1.0 / 3) * math.pi * r * r * h\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 486.1672058105469}
{"task_id": 313, "code": "def pos_nos(list1):\n    for num in list1:\n        if num >= 0:\n            return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 412.150146484375}
{"task_id": 314, "code": "def max_sum_rectangular_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 421.75506591796875}
{"task_id": 315, "code": "def find_Max_Len_Even(str):\n    n = len(str)\n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while i < n:\n        if str[i] == \" \":\n            if currlen % 2 == 0:\n                if maxlen < currlen:\n                    maxlen = currlen\n                    st = i - currlen\n            currlen = 0\n        else:\n            currlen += 1\n        i += 1\n    if currlen % 2 == 0:\n        if maxlen < currlen:\n            maxlen = currlen\n            st = i - currlen\n    if st == -1:\n        return \"-1\"\n    return str[st : st + maxlen]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.12188720703125}
{"task_id": 317, "code": "from itertools import groupby\n\n\ndef modified_encode(alist):\n    def ctr_ele(el):\n        if len(el) > 1:\n            return [len(el), el[0]]\n        else:\n            return el[0]\n\n    return [ctr_ele(list(group)) for key, group in groupby(alist)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 436.2630920410156}
{"task_id": 316, "code": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.446044921875}
{"task_id": 318, "code": "def max_volume(s):\n    maxvalue = 0\n    i = 1\n    for i in range(s - 1):\n        j = 1\n        for j in range(s):\n            k = s - i - j\n            maxvalue = max(maxvalue, i * j * k)\n    return maxvalue\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.83612060546875}
{"task_id": 320, "code": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n + 1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum**2\n    return squareofsum - sumofsquares\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 436.6850891113281}
{"task_id": 321, "code": "def find_demlo(s):\n    l = len(s)\n    res = \"\"\n    for i in range(1, l + 1):\n        res = res + str(i)\n    for i in range(l - 1, 0, -1):\n        res = res + str(i)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 406.6712951660156}
{"task_id": 319, "code": "import re\n\n\ndef find_long_word(text):\n    return re.findall(r\"\\b\\w{5}\\b\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 530.609130859375}
{"task_id": 322, "code": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.1190185546875}
{"task_id": 323, "code": "def right_rotate(arr, n, out_of_place, cur):\n    temp = arr[cur]\n    for i in range(cur, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n\ndef re_arrange(arr, n):\n    out_of_place = -1\n    for index in range(n):\n        if out_of_place >= 0:\n            if (arr[index] >= 0 and arr[out_of_place] < 0) or (\n                arr[index] < 0 and arr[out_of_place] >= 0\n            ):\n                arr = right_rotate(arr, n, out_of_place, index)\n                if index - out_of_place > 2:\n                    out_of_place += 2\n                else:\n                    out_of_place = -1\n        if out_of_place == -1:\n            if (arr[index] >= 0 and index % 2 == 0) or (\n                arr[index] < 0 and index % 2 == 1\n            ):\n                out_of_place = index\n    return arr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 425.57476806640625}
{"task_id": 325, "code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + get_Min_Squares(n - temp))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 447.0121765136719}
{"task_id": 326, "code": "from collections import defaultdict\n\n\ndef most_occurrences(test_list):\n    temp = defaultdict(int)\n    for sub in test_list:\n        for wrd in sub.split():\n            temp[wrd] += 1\n    res = max(temp, key=temp.get)\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 409.5423278808594}
{"task_id": 324, "code": "def sum_of_alternates(test_tuple):\n    sum1 = 0\n    sum2 = 0\n    for idx, ele in enumerate(test_tuple):\n        if idx % 2:\n            sum1 += ele\n        else:\n            sum2 += ele\n    return ((sum1), (sum2))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.80712890625}
{"task_id": 327, "code": "def check_isosceles(x, y, z):\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 391.5498352050781}
{"task_id": 328, "code": "def rotate_left(list1, m, n):\n    result = list1[m:] + list1[:n]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 410.5768127441406}
{"task_id": 329, "code": "def neg_count(list):\n    neg_count = 0\n    for num in list:\n        if num <= 0:\n            neg_count += 1\n    return neg_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 413.04205322265625}
{"task_id": 330, "code": "import re\n\n\ndef find_char(text):\n    return re.findall(r\"\\b\\w{3,5}\\b\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 473.2782897949219}
{"task_id": 331, "code": "def count_unset_bits(n):\n    count = 0\n    x = 1\n    while x < n + 1:\n        if (x & n) == 0:\n            count += 1\n        x = x << 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.23175048828125}
{"task_id": 332, "code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.09014892578125}
{"task_id": 333, "code": "def Sort(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 392.5819396972656}
{"task_id": 334, "code": "def check_Validity(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return False\n    else:\n        return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 368.3488464355469}
{"task_id": 335, "code": "def ap_sum(a, n, d):\n    total = (n * (2 * a + (n - 1) * d)) / 2\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 407.3648376464844}
{"task_id": 336, "code": "def check_monthnum(monthname1):\n    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 397.3171691894531}
{"task_id": 337, "code": "import re\n\n\ndef text_match_word(text):\n    patterns = \"\\w+\\S*$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 513.1311645507812}
{"task_id": 338, "code": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i : i + j]):\n                result += 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.21697998046875}
{"task_id": 340, "code": "def sum_three_smallest_nums(lst):\n    return sum(sorted([x for x in lst if x > 0])[:3])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 394.2651672363281}
{"task_id": 339, "code": "def find_Divisor(x, y):\n    if x == y:\n        return y\n    return 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.8360900878906}
{"task_id": 341, "code": "def set_to_tuple(s):\n    t = tuple(sorted(s))\n    return t\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.8209228515625}
{"task_id": 342, "code": "from heapq import heappop, heappush\n\n\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n\ndef find_minimum_range(list):\n    high = float(\"-inf\")\n    p = (0, float(\"inf\"))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 405.0231018066406}
{"task_id": 343, "code": "def dig_let(s):\n    d = l = 0\n    for c in s:\n        if c.isdigit():\n            d = d + 1\n        elif c.isalpha():\n            l = l + 1\n        else:\n            pass\n    return (l, d)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.30108642578125}
{"task_id": 344, "code": "def count_Odd_Squares(n, m):\n    return int(m**0.5) - int((n - 1) ** 0.5)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 410.05682373046875}
{"task_id": 345, "code": "def diff_consecutivenums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.62432861328125}
{"task_id": 346, "code": "def zigzag(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 0\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 483.5372009277344}
{"task_id": 348, "code": "def bin_coff(n, r):\n    val = 1\n    if r > (n - r):\n        r = n - r\n    for i in range(0, r):\n        val *= n - i\n        val //= i + 1\n    return val\n\n\ndef find_ways(M):\n    n = M // 2\n    a = bin_coff(2 * n, n)\n    b = a // (n + 1)\n    return b\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 515.7930908203125}
{"task_id": 347, "code": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return n * (n + 1) * (3 * m - n + 1) // 6\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 557.6429443359375}
{"task_id": 349, "code": "def check(string):\n    p = set(string)\n    s = {\"0\", \"1\"}\n    if s == p or p == {\"0\"} or p == {\"1\"}:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 493.611083984375}
{"task_id": 350, "code": "def minimum_Length(s):\n    maxOcc = 0\n    n = len(s)\n    arr = [0] * 26\n    for i in range(n):\n        arr[ord(s[i]) - ord(\"a\")] += 1\n    for i in range(26):\n        if arr[i] > maxOcc:\n            maxOcc = arr[i]\n    return n - maxOcc\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 494.9500427246094}
{"task_id": 351, "code": "def first_Element(arr, n, k):\n    count_map = {}\n    for i in range(0, n):\n        if arr[i] in count_map.keys():\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):\n        if count_map[arr[i]] == k:\n            return arr[i]\n        i += 1\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 500.294921875}
{"task_id": 352, "code": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.05096435546875}
{"task_id": 354, "code": "def tn_ap(a, n, d):\n    tn = a + (n - 1) * d\n    return tn\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 420.34912109375}
{"task_id": 353, "code": "def remove_column(list1, n):\n    for i in list1:\n        del i[n]\n    return list1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 473.75177001953125}
{"task_id": 355, "code": "def count_Rectangles(radius):\n    rectangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            diagnalLengthSquare = a * a + b * b\n            if diagnalLengthSquare <= diameterSquare:\n                rectangles += 1\n    return rectangles\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 407.9942626953125}
{"task_id": 356, "code": "def find_angle(a, b):\n    c = 180 - (a + b)\n    return c\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.0260009765625}
{"task_id": 357, "code": "def find_max(test_list):\n    res = max(int(j) for i in test_list for j in i)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 449.3119812011719}
{"task_id": 358, "code": "def moddiv_list(nums1, nums2):\n    result = map(lambda x, y: x % y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 439.5987854003906}
{"task_id": 359, "code": "def Check_Solution(a, b, c):\n    if 2 * b * b == 9 * a * c:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 437.0150451660156}
{"task_id": 360, "code": "def get_carol(n):\n    result = (2**n) - 1\n    return result * result - 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 436.0103759765625}
{"task_id": 361, "code": "def remove_empty(list1):\n    remove_empty = [x for x in list1 if x]\n    return remove_empty\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.677978515625}
{"task_id": 362, "code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0]\n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.5308837890625}
{"task_id": 363, "code": "def add_K_element(test_list, K):\n    res = [tuple(j + K for j in sub) for sub in test_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 401.1268615722656}
{"task_id": 365, "code": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 353.6870422363281}
{"task_id": 366, "code": "def adjacent_num_product(list_nums):\n    return max(a * b for a, b in zip(list_nums, list_nums[1:]))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.80609130859375}
{"task_id": 364, "code": "def make_flip(ch):\n    return \"1\" if (ch == \"0\") else \"0\"\n\n\ndef get_flip_with_starting_charcter(str, expected):\n    flip_count = 0\n    for i in range(len(str)):\n        if str[i] != expected:\n            flip_count += 1\n        expected = make_flip(expected)\n    return flip_count\n\n\ndef min_flip_to_make_string_alternate(str):\n    return min(\n        get_flip_with_starting_charcter(str, \"0\"),\n        get_flip_with_starting_charcter(str, \"1\"),\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 424.68310546875}
{"task_id": 368, "code": "def repeat_tuples(test_tup, N):\n    res = (test_tup,) * N\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 397.44281005859375}
{"task_id": 367, "code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    lh = get_height(root.left)\n    rh = get_height(root.right)\n    if (\n        (abs(lh - rh) <= 1)\n        and is_tree_balanced(root.left) is True\n        and is_tree_balanced(root.right) is True\n    ):\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "errors": ["name 'root' is not defined"]}, {"caseId": "case_1", "errors": ["name 'root1' is not defined"]}, {"caseId": "case_2", "errors": ["name 'root2' is not defined"]}], "exec_time_ms": 422.628173828125}
{"task_id": 369, "code": "def lateralsurface_cuboid(l, w, h):\n    LSA = 2 * h * (l + w)\n    return LSA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.0900573730469}
{"task_id": 370, "code": "def float_sort(price):\n    float_sort = sorted(price, key=lambda x: float(x[1]), reverse=True)\n    return float_sort\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.78692626953125}
{"task_id": 372, "code": "import heapq as hq\n\n\ndef heap_assending(nums):\n    hq.heapify(nums)\n    s_result = [hq.heappop(nums) for i in range(len(nums))]\n    return s_result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.3681335449219}
{"task_id": 373, "code": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 368.703125}
{"task_id": 371, "code": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 480.5362243652344}
{"task_id": 374, "code": "def permute_string(str):\n    if len(str) == 0:\n        return [\"\"]\n    prev_list = permute_string(str[1 : len(str)])\n    next_list = []\n    for i in range(0, len(prev_list)):\n        for j in range(0, len(str)):\n            new_str = prev_list[i][0:j] + str[0] + prev_list[i][j : len(str) - 1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 391.61993408203125}
{"task_id": 375, "code": "def round_num(n, m):\n    a = (n // m) * m\n    b = a + m\n    return b if n - a > b - n else a\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 389.6522521972656}
{"task_id": 376, "code": "def remove_replica(test_tup):\n    temp = set()\n    res = tuple(\n        ele if ele not in temp and not temp.add(ele) else \"MSP\" for ele in test_tup\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.1451416015625}
{"task_id": 377, "code": "def remove_Char(s, c):\n    counts = s.count(c)\n    s = list(s)\n    while counts:\n        s.remove(c)\n        counts -= 1\n    s = \"\".join(s)\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 373.02398681640625}
{"task_id": 379, "code": "def surfacearea_cuboid(l, w, h):\n    SA = 2 * (l * w + l * h + w * h)\n    return SA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 369.0118713378906}
{"task_id": 378, "code": "def move_first(test_list):\n    test_list = test_list[-1:] + test_list[:-1]\n    return test_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 424.8492736816406}
{"task_id": 380, "code": "def multi_list(rownum, colnum):\n    multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n    for row in range(rownum):\n        for col in range(colnum):\n            multi_list[row][col] = row * col\n    return multi_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.5857849121094}
{"task_id": 383, "code": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 377.7720947265625}
{"task_id": 381, "code": "from operator import itemgetter\n\n\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 474.4820556640625}
{"task_id": 384, "code": "def frequency_Of_Smallest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] < mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 391.8299560546875}
{"task_id": 382, "code": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 447.6578369140625}
{"task_id": 385, "code": "def get_perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 2) + get_perrin(n - 3)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.4200439453125}
{"task_id": 386, "code": "def swap_count(s):\n    chars = s\n    count_left = 0\n    count_right = 0\n    swap = 0\n    imbalance = 0\n    for i in range(len(chars)):\n        if chars[i] == \"[\":\n            count_left += 1\n            if imbalance > 0:\n                swap += imbalance\n                imbalance -= 1\n        elif chars[i] == \"]\":\n            count_right += 1\n            imbalance = count_right - count_left\n    return swap\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 416.5790100097656}
{"task_id": 387, "code": "def even_or_odd(N):\n    l = len(N)\n    if (\n        N[l - 1] == \"0\"\n        or N[l - 1] == \"2\"\n        or N[l - 1] == \"4\"\n        or N[l - 1] == \"6\"\n        or N[l - 1] == \"8\"\n        or N[l - 1] == \"A\"\n        or N[l - 1] == \"C\"\n        or N[l - 1] == \"E\"\n    ):\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 423.7382507324219}
{"task_id": 388, "code": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0:\n            res = i\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 386.28411865234375}
{"task_id": 389, "code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 369.85589599609375}
{"task_id": 390, "code": "def add_string(list, string):\n    add_string = [string.format(i) for i in list]\n    return add_string\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.8801574707031}
{"task_id": 391, "code": "def convert_list_dictionary(l1, l2, l3):\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 459.59210205078125}
{"task_id": 392, "code": "def get_max_sum(n):\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    while i < n + 1:\n        res.append(\n            max(\n                i,\n                (res[int(i / 2)] + res[int(i / 3)] + res[int(i / 4)] + res[int(i / 5)]),\n            )\n        )\n        i = i + 1\n    return res[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.7709655761719}
{"task_id": 393, "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: len(i))\n    return (max_length, max_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 366.97198486328125}
{"task_id": 394, "code": "def check_distinct(test_tup):\n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.7257385253906}
{"task_id": 395, "code": "def first_non_repeating_character(str1):\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1\n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 421.5402526855469}
{"task_id": 397, "code": "def median_numbers(a, b, c):\n    if a > b:\n        if a < c:\n            median = a\n        elif b > c:\n            median = b\n        else:\n            median = c\n    else:\n        if a > c:\n            median = a\n        elif b < c:\n            median = b\n        else:\n            median = c\n    return median\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 464.263916015625}
{"task_id": 398, "code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.05499267578125}
{"task_id": 396, "code": "import re\n\nregex = r\"^[a-z]$|^([a-z]).*\\1$\"\n\n\ndef check_char(string):\n    if re.search(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 563.5030517578125}
{"task_id": 400, "code": "def extract_freq(test_list):\n    res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 407.55914306640625}
{"task_id": 399, "code": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 455.119140625}
{"task_id": 401, "code": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(\n        tuple(a + b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 460.55413818359375}
{"task_id": 402, "code": "def ncr_modp(n, r, p):\n    C = [0 for i in range(r + 1)]\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.94097900390625}
{"task_id": 403, "code": "import re\n\n\ndef is_valid_URL(str):\n    regex = (\n        \"((http|https)://)(www.)?\"\n        + \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\"\n        + \"{2,256}\\\\.[a-z]\"\n        + \"{2,6}\\\\b([-a-zA-Z0-9@:%\"\n        + \"._\\\\+~#?&//=]*)\"\n    )\n    p = re.compile(regex)\n    if str == None:\n        return False\n    if re.search(p, str):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 425.6279602050781}
{"task_id": 405, "code": "def check_tuplex(tuplex, tuple1):\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.3309631347656}
{"task_id": 404, "code": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.81719970703125}
{"task_id": 406, "code": "def find_Parity(x):\n    y = x ^ (x >> 1)\n    y = y ^ (y >> 2)\n    y = y ^ (y >> 4)\n    y = y ^ (y >> 8)\n    y = y ^ (y >> 16)\n    if y & 1:\n        return \"Odd Parity\"\n    return \"Even Parity\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 353.84393310546875}
{"task_id": 407, "code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums) - 2, -1, -1):\n        if nums[i] < nums[i + 1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.216064453125}
{"task_id": 408, "code": "import heapq\n\n\ndef k_smallest_pairs(nums1, nums2, k):\n    queue = []\n\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 410.9141845703125}
{"task_id": 409, "code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1])\n    return result_min\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 480.1192321777344}
{"task_id": 410, "code": "def min_val(listval):\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 496.32501220703125}
{"task_id": 411, "code": "import re\n\n\ndef snake_to_camel(word):\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 494.9479064941406}
{"task_id": 413, "code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.10791015625}
{"task_id": 414, "code": "def overlapping(list1, list2):\n    c = 0\n    d = 0\n    for i in list1:\n        c += 1\n    for i in list2:\n        d += 1\n    for i in range(0, c):\n        for j in range(0, d):\n            if list1[i] == list2[j]:\n                return 1\n    return 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 445.92999267578125}
{"task_id": 412, "code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.719970703125}
{"task_id": 415, "code": "def max_Product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return \"No pairs exists\"\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 439.1319885253906}
{"task_id": 416, "code": "MAX = 1000000\n\n\ndef breakSum(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = max(dp[int(i / 2)] + dp[int(i / 3)] + dp[int(i / 4)], i)\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 374.7270202636719}
{"task_id": 417, "code": "def group_tuples(Input):\n    out = {}\n    for elem in Input:\n        try:\n            out[elem[0]].extend(elem[1:])\n        except KeyError:\n            out[elem[0]] = list(elem)\n    return [tuple(values) for values in out.values()]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.94708251953125}
{"task_id": 418, "code": "def Find_Max(lst):\n    maxList = max((x) for x in lst)\n    return maxList\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 462.90301513671875}
{"task_id": 420, "code": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) * (2 * i) * (2 * i)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.0960998535156}
{"task_id": 419, "code": "def round_and_sum(list1):\n    lenght = len(list1)\n    round_and_sum = sum(list(map(round, list1)) * lenght)\n    return round_and_sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.8218994140625}
{"task_id": 421, "code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = \"\".join([str(ele) + delim for ele in test_tup])\n    res = res[: len(res) - len(delim)]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 385.58697509765625}
{"task_id": 422, "code": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return round(sum / n, 6)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 429.8281555175781}
{"task_id": 424, "code": "def extract_rear(test_tuple):\n    res = list(sub[len(sub) - 1] for sub in test_tuple)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 390.4430847167969}
{"task_id": 423, "code": "def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] for j in range(m)]\n    for col in range(n - 1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 457.7977600097656}
{"task_id": 425, "code": "def count_element_in_list(list1, x):\n    ctr = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            ctr += 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.6029357910156}
{"task_id": 426, "code": "def filter_oddnumbers(nums):\n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.0030212402344}
{"task_id": 427, "code": "import re\n\n\ndef change_date_format(dt):\n    return re.sub(r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\", \"\\\\3-\\\\2-\\\\1\", dt)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 446.8119201660156}
{"task_id": 429, "code": "def and_tuples(test_tup1, test_tup2):\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 452.12078857421875}
{"task_id": 430, "code": "def parabola_directrix(a, b, c):\n    directrix = (int)(c - ((b * b) + 1) * 4 * a)\n    return directrix\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.1616516113281}
{"task_id": 431, "code": "def common_element(list1, list2):\n    result = False\n    for x in list1:\n        for y in list2:\n            if x == y:\n                result = True\n                return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 380.1839294433594}
{"task_id": 428, "code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 457.8998107910156}
{"task_id": 432, "code": "def median_trapezium(base1, base2, height):\n    median = 0.5 * (base1 + base2)\n    return median\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.33404541015625}
{"task_id": 433, "code": "def check_greater(arr, number):\n    arr.sort()\n    if number > arr[-1]:\n        return \"Yes, the entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 396.3818664550781}
{"task_id": 434, "code": "import re\n\n\ndef text_match_one(text):\n    patterns = \"ab+?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 403.0799865722656}
{"task_id": 435, "code": "def last_Digit(n):\n    return n % 10\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 335.9971008300781}
{"task_id": 436, "code": "def neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 466.20391845703125}
{"task_id": 439, "code": "def multiple_to_single(L):\n    x = int(\"\".join(map(str, L)))\n    return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 483.4990539550781}
{"task_id": 437, "code": "def remove_odd(str1):\n    str2 = \"\"\n    for i in range(1, len(str1) + 1):\n        if i % 2 == 0:\n            str2 = str2 + str1[i - 1]\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 497.56597900390625}
{"task_id": 438, "code": "def count_bidirectional(test_list):\n    res = 0\n    for idx in range(0, len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n            if (\n                test_list[iidx][0] == test_list[idx][1]\n                and test_list[idx][1] == test_list[iidx][0]\n            ):\n                res += 1\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 505.1817932128906}
{"task_id": 440, "code": "import re\n\n\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 576.8699951171875}
{"task_id": 441, "code": "def surfacearea_cube(l):\n    surfacearea = 6 * l * l\n    return surfacearea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 582.5860595703125}
{"task_id": 443, "code": "def largest_neg(list1):\n    max = list1[0]\n    for x in list1:\n        if x < max:\n            max = x\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 492.93780517578125}
{"task_id": 442, "code": "from array import array\n\n\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 588.9260864257812}
{"task_id": 444, "code": "def trim_tuple(test_list, K):\n    res = []\n    for ele in test_list:\n        N = len(ele)\n        res.append(tuple(list(ele)[K : N - K]))\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 366.4278869628906}
{"task_id": 447, "code": "def cube_nums(nums):\n    cube_nums = list(map(lambda x: x**3, nums))\n    return cube_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.32708740234375}
{"task_id": 445, "code": "def index_multiplication(test_tup1, test_tup2):\n    res = tuple(\n        tuple(a * b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 459.2478332519531}
{"task_id": 446, "code": "from collections import Counter\n\n\ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup:\n        if item in lst:\n            count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.83270263671875}
{"task_id": 448, "code": "def cal_sum(n):\n    a = 3\n    b = 0\n    c = 2\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    sum = 5\n    while n > 2:\n        d = a + b\n        sum = sum + d\n        a = b\n        b = c\n        c = d\n        n = n - 1\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 403.8763122558594}
{"task_id": 449, "code": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    a = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    if a == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 409.952880859375}
{"task_id": 450, "code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 424.07989501953125}
{"task_id": 452, "code": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        return None\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.0901794433594}
{"task_id": 451, "code": "import re\n\n\ndef remove_whitespaces(text1):\n    return re.sub(r\"\\s+\", \"\", text1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 557.6240844726562}
{"task_id": 453, "code": "import math\n\n\ndef sumofFactors(n):\n    if n % 2 != 0:\n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count = count + 1\n            n = n // i\n            if i == 2 and count == 1:\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if n >= 2:\n        res = res * (1 + n)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 390.0299072265625}
{"task_id": 454, "code": "import re\n\n\ndef text_match_wordz(text):\n    patterns = \"\\w*z.\\w*\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 488.99603271484375}
{"task_id": 456, "code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 465.1808776855469}
{"task_id": 455, "code": "def check_monthnumb_number(monthnum2):\n    if (\n        monthnum2 == 1\n        or monthnum2 == 3\n        or monthnum2 == 5\n        or monthnum2 == 7\n        or monthnum2 == 8\n        or monthnum2 == 10\n        or monthnum2 == 12\n    ):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 469.5882873535156}
{"task_id": 457, "code": "def Find_Min(lst):\n    minList = min((x) for x in lst)\n    return minList\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 406.2490539550781}
{"task_id": 458, "code": "def rectangle_area(l, b):\n    area = l * b\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 415.0628967285156}
{"task_id": 459, "code": "import re\n\n\ndef remove_uppercase(str1):\n    remove_upper = lambda text: re.sub(\"[A-Z]\", \"\", text)\n    result = remove_upper(str1)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 467.742919921875}
{"task_id": 460, "code": "def Extract(lst):\n    return [item[0] for item in lst]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.3990173339844}
{"task_id": 461, "code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n        if str[i] >= \"A\" and str[i] <= \"Z\":\n            upper_ctr += 1\n        return upper_ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.8258972167969}
{"task_id": 462, "code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el + [list1[0]]]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 389.9900817871094}
{"task_id": 463, "code": "def max_subarray_product(arr):\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    for i in range(0, n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n            flag = 1\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 0:\n        return 0\n    return max_so_far\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 355.23773193359375}
{"task_id": 464, "code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values())\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 427.52386474609375}
{"task_id": 466, "code": "def find_peak_util(arr, low, high, n):\n    mid = low + (high - low) / 2\n    mid = int(mid)\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (\n        mid == n - 1 or arr[mid + 1] <= arr[mid]\n    ):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n\n\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 377.5978088378906}
{"task_id": 465, "code": "def drop_empty(dict1):\n    dict1 = {key: value for (key, value) in dict1.items() if value is not None}\n    return dict1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.1167602539062}
{"task_id": 467, "code": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1\n    dNo = deciNum\n    while deciNum != 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval = countval * 10\n        deciNum //= 8\n    return octalNum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 472.62786865234375}
{"task_id": 468, "code": "def max_product(arr, n):\n    mpis = [0] * (n)\n    for i in range(n):\n        mpis[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and mpis[i] < (mpis[j] * arr[i]):\n                mpis[i] = mpis[j] * arr[i]\n    return max(mpis)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 509.7842102050781}
{"task_id": 469, "code": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i - 1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j - 1], max_so_far)\n    return final_profit[k][n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.4189453125}
{"task_id": 470, "code": "def add_pairwise(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 541.5170288085938}
{"task_id": 471, "code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):\n        mul = (mul * (arr[i] % n)) % n\n    return mul % n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 514.6171875}
{"task_id": 472, "code": "def check_Consecutive(l):\n    return sorted(l) == list(range(min(l), max(l) + 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.8182067871094}
{"task_id": 473, "code": "def tuple_intersection(test_list1, test_list2):\n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set(\n        [tuple(sorted(ele)) for ele in test_list2]\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 477.03289794921875}
{"task_id": 474, "code": "def replace_char(str1, ch, newch):\n    str2 = str1.replace(ch, newch)\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.53997802734375}
{"task_id": 475, "code": "from collections import Counter\n\n\ndef sort_counter(dict1):\n    x = Counter(dict1)\n    sort_counter = x.most_common()\n    return sort_counter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 462.85296630859375}
{"task_id": 476, "code": "def big_sum(nums):\n    sum = max(nums) + min(nums)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 358.2778015136719}
{"task_id": 477, "code": "def is_lower(string):\n    return string.lower()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 360.1341247558594}
{"task_id": 479, "code": "def first_Digit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 460.9491882324219}
{"task_id": 480, "code": "def get_max_occuring_char(str1):\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max = -1\n    ch = \"\"\n    for i in str1:\n        ctr[ord(i)] += 1\n    for i in str1:\n        if max < ctr[ord(i)]:\n            max = ctr[ord(i)]\n            ch = i\n    return ch\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.0889892578125}
{"task_id": 478, "code": "import re\n\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub(\"[a-z]\", \"\", text)\n    result = remove_lower(str1)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 489.9888000488281}
{"task_id": 481, "code": "def is_subset_sum(set, n, sum):\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.3290100097656}
{"task_id": 483, "code": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    fact = 1\n    for i in range(1, x):\n        fact = fact * i\n        if fact % x == 0:\n            break\n    return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 378.91888427734375}
{"task_id": 482, "code": "import re\n\n\ndef match(text):\n    pattern = \"[A-Z]+[a-z]+$\"\n    if re.search(pattern, text):\n        return \"Yes\"\n    else:\n        return \"No\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 527.1019897460938}
{"task_id": 484, "code": "def remove_matching_tuple(test_list1, test_list2):\n    res = [sub for sub in test_list1 if sub not in test_list2]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 391.4270324707031}
{"task_id": 485, "code": "def is_palindrome(n):\n    divisor = 1\n    while n / divisor >= 10:\n        divisor *= 10\n    while n != 0:\n        leading = n // divisor\n        trailing = n % 10\n        if leading != trailing:\n            return False\n        n = (n % divisor) // 10\n        divisor = divisor // 100\n    return True\n\n\ndef largest_palindrome(A, n):\n    A.sort()\n    for i in range(n - 1, -1, -1):\n        if is_palindrome(A[i]):\n            return A[i]\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 397.4697570800781}
{"task_id": 487, "code": "def sort_tuple(tup):\n    lst = len(tup)\n    for i in range(0, lst):\n        for j in range(0, lst - i - 1):\n            if tup[j][-1] > tup[j + 1][-1]:\n                temp = tup[j]\n                tup[j] = tup[j + 1]\n                tup[j + 1] = temp\n    return tup\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 439.94329833984375}
{"task_id": 488, "code": "import math\n\n\ndef area_pentagon(a):\n    area = (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * pow(a, 2)) / 4.0\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 467.5910339355469}
{"task_id": 486, "code": "def nCr(n, r):\n    if r > n / 2:\n        r = n - r\n    answer = 1\n    for i in range(1, r + 1):\n        answer *= n - r + i\n        answer /= i\n    return answer\n\n\ndef binomial_probability(n, k, p):\n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 513.0770263671875}
{"task_id": 490, "code": "def extract_symmetric(test_list):\n    temp = set(test_list) & {(b, a) for a, b in test_list}\n    res = {(a, b) for a, b in temp if a < b}\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 374.96209716796875}
{"task_id": 489, "code": "def frequency_Of_Largest(n, arr):\n    mn = arr[0]\n    freq = 1\n    for i in range(1, n):\n        if arr[i] > mn:\n            mn = arr[i]\n            freq = 1\n        elif arr[i] == mn:\n            freq += 1\n    return freq\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.7831115722656}
{"task_id": 491, "code": "import math\n\n\ndef sum_gp(a, n, r):\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 412.7099609375}
{"task_id": 492, "code": "def binary_search(item_list, item):\n    first = 0\n    last = len(item_list) - 1\n    found = False\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.720947265625}
{"task_id": 493, "code": "import math\n\n\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y),\n            ]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.2616271972656}
{"task_id": 494, "code": "def binary_to_integer(test_tup):\n    res = int(\"\".join(str(ele) for ele in test_tup), 2)\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 394.042724609375}
{"task_id": 495, "code": "import re\n\n\ndef remove_lowercase(str1):\n    remove_lower = lambda text: re.sub(\"[a-z]\", \"\", text)\n    result = remove_lower(str1)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.003173828125}
{"task_id": 498, "code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break\n    return gcd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 439.9809875488281}
{"task_id": 496, "code": "import heapq as hq\n\n\ndef heap_queue_smallest(nums, n):\n    smallest_nums = hq.nsmallest(n, nums)\n    return smallest_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 502.004150390625}
{"task_id": 500, "code": "def concatenate_elements(list):\n    ans = \" \"\n    for i in list:\n        ans = ans + \" \" + i\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 392.1010437011719}
{"task_id": 497, "code": "import math\n\n\ndef surfacearea_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    SA = math.pi * r * (r + l)\n    return SA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 466.5381774902344}
{"task_id": 499, "code": "def diameter_circle(r):\n    diameter = 2 * r\n    return diameter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 452.1670227050781}
{"task_id": 501, "code": "def ngcd(x, y):\n    i = 1\n    while i <= x and i <= y:\n        if x % i == 0 and y % i == 0:\n            gcd = i\n        i += 1\n    return gcd\n\n\ndef num_comm_div(x, y):\n    n = ngcd(x, y)\n    result = 0\n    z = int(n**0.5)\n    i = 1\n    while i <= z:\n        if n % i == 0:\n            result += 2\n            if i == n / i:\n                result -= 1\n        i += 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 454.7977294921875}
{"task_id": 502, "code": "def find(n, m):\n    r = n % m\n    return r\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 376.0080261230469}
{"task_id": 503, "code": "def add_consecutive_nums(nums):\n    result = [b + a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 440.6137390136719}
{"task_id": 505, "code": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 414.9119873046875}
{"task_id": 504, "code": "def sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i * i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 481.7001953125}
{"task_id": 506, "code": "def permutation_coefficient(n, k):\n    P = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0:\n                P[i][j] = 1\n            else:\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1])\n            if j < k:\n                P[i][j + 1] = 0\n    return P[n][k]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 479.2008361816406}
{"task_id": 508, "code": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.3983154296875}
{"task_id": 507, "code": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.8008422851562}
{"task_id": 510, "code": "def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for i in range(n + 1)] for j in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n    return dp[k][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.0118103027344}
{"task_id": 509, "code": "def average_Odd(n):\n    if n % 2 == 0:\n        return \"Invalid Input\"\n        return -1\n    sm = 0\n    count = 0\n    while n >= 1:\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm // count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 553.4620361328125}
{"task_id": 511, "code": "def find_Min_Sum(num):\n    sum = 0\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 457.6251525878906}
{"task_id": 512, "code": "def flatten(test_tuple):\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            yield from flatten(tup)\n        else:\n            yield tup\n\n\ndef count_element_freq(test_tuple):\n    res = {}\n    for ele in flatten(test_tuple):\n        if ele not in res:\n            res[ele] = 0\n        res[ele] += 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.4820861816406}
{"task_id": 513, "code": "def add_str(test_tup, K):\n    res = [ele for sub in test_tup for ele in (sub, K)]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.4710998535156}
{"task_id": 514, "code": "def sum_elements(test_tup):\n    res = sum(list(test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 401.0050354003906}
{"task_id": 515, "code": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    DP = [False for i in range(m)]\n    for i in range(n):\n        if DP[0]:\n            return True\n        temp = [False for i in range(m)]\n        for j in range(m):\n            if DP[j] == True:\n                if DP[(j + arr[i]) % m] == False:\n                    temp[(j + arr[i]) % m] = True\n        for j in range(m):\n            if temp[j]:\n                DP[j] = True\n        DP[arr[i] % m] = True\n    return DP[0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 386.841064453125}
{"task_id": 516, "code": "def radix_sort(nums):\n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement < max_digit:\n        buckets = [list() for _ in range(RADIX)]\n        for i in nums:\n            tmp = int((i / placement) % RADIX)\n            buckets[tmp].append(i)\n        a = 0\n        for b in range(RADIX):\n            buck = buckets[b]\n            for i in buck:\n                nums[a] = i\n                a += 1\n        placement *= RADIX\n    return nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 431.2322082519531}
{"task_id": 518, "code": "import math\n\n\ndef sqrt_root(num):\n    sqrt_root = math.pow(num, 0.5)\n    return sqrt_root\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 409.29888916015625}
{"task_id": 517, "code": "def largest_pos(list1):\n    max = list1[0]\n    for x in list1:\n        if x > max:\n            max = x\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 426.19110107421875}
{"task_id": 519, "code": "import math\n\n\ndef volume_tetrahedron(num):\n    volume = num**3 / (6 * math.sqrt(2))\n    return round(volume, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.89697265625}
{"task_id": 520, "code": "def find_lcm(num1, num2):\n    if num1 > num2:\n        num = num1\n        den = num2\n    else:\n        num = num2\n        den = num1\n    rem = num % den\n    while rem != 0:\n        num = den\n        den = rem\n        rem = num % den\n    gcd = den\n    lcm = int(int(num1 * num2) / int(gcd))\n    return lcm\n\n\ndef get_lcm(l):\n    num1 = l[0]\n    num2 = l[1]\n    lcm = find_lcm(num1, num2)\n    for i in range(2, len(l)):\n        lcm = find_lcm(lcm, l[i])\n    return lcm\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.9100341796875}
{"task_id": 522, "code": "def lbs(arr):\n    n = len(arr)\n    lis = [1 for i in range(n + 1)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if (arr[i] > arr[j]) and (lis[i] < lis[j] + 1):\n                lis[i] = lis[j] + 1\n    lds = [1 for i in range(n + 1)]\n    for i in reversed(range(n - 1)):\n        for j in reversed(range(i - 1, n)):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    maximum = lis[0] + lds[0] - 1\n    for i in range(1, n):\n        maximum = max((lis[i] + lds[i] - 1), maximum)\n    return maximum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 356.22882080078125}
{"task_id": 521, "code": "def check_isosceles(x, y, z):\n    if x != y & y != z & z != x:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.847900390625}
{"task_id": 523, "code": "def check_string(str1):\n    messg = [\n        lambda str1: any(x.isupper() for x in str1)\n        or \"String must have 1 upper case character.\",\n        lambda str1: any(x.islower() for x in str1)\n        or \"String must have 1 lower case character.\",\n        lambda str1: any(x.isdigit() for x in str1) or \"String must have 1 number.\",\n        lambda str1: len(str1) >= 7 or \"String length should be atleast 8.\",\n    ]\n    result = [x for x in [i(str1) for i in messg] if x != True]\n    if not result:\n        result.append(\"Valid string.\")\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 405.8599548339844}
{"task_id": 524, "code": "def max_sum_increasing_subsequence(arr, n):\n    max = 0\n    msis = [0 for x in range(n)]\n    for i in range(n):\n        msis[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n    for i in range(n):\n        if max < msis[i]:\n            max = msis[i]\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 411.0362548828125}
{"task_id": 525, "code": "def parallel_lines(line1, line2):\n    return line1[0] / line1[1] == line2[0] / line2[1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 444.0650939941406}
{"task_id": 526, "code": "def capitalize_first_last_letters(str1):\n    str1 = result = str1.title()\n    result = \"\"\n    for word in str1.split():\n        result += word[:-1] + word[-1].upper() + \" \"\n    return result[:-1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 435.2221374511719}
{"task_id": 528, "code": "def min_length(list1):\n    min_length = min(len(x) for x in list1)\n    min_list = min((x) for x in list1)\n    return (min_length, min_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.76104736328125}
{"task_id": 527, "code": "def get_pairs_count(arr, n, sum):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 471.0857849121094}
{"task_id": 529, "code": "def jacobsthal_lucas(n):\n    dp = [0] * (n + 1)\n    dp[0] = 2\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 383.4931945800781}
{"task_id": 530, "code": "from array import array\n\n\ndef negative_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.9497985839844}
{"task_id": 531, "code": "import sys\n\n\ndef min_coins(coins, m, V):\n    if V == 0:\n        return 0\n    res = sys.maxsize\n    for i in range(0, m):\n        if coins[i] <= V:\n            sub_res = min_coins(coins, m, V - coins[i])\n            if sub_res != sys.maxsize and sub_res + 1 < res:\n                res = sub_res + 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 372.0760498046875}
{"task_id": 532, "code": "def check_permutation(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    if n1 != n2:\n        return False\n    a = sorted(str1)\n    str1 = \" \".join(a)\n    b = sorted(str2)\n    str2 = \" \".join(b)\n    for i in range(0, n1, 1):\n        if str1[i] != str2[i]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 463.4737854003906}
{"task_id": 533, "code": "def remove_datatype(test_tuple, data_type):\n    res = []\n    for ele in test_tuple:\n        if not isinstance(ele, data_type):\n            res.append(ele)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 402.08984375}
{"task_id": 535, "code": "def topbottom_surfacearea(r):\n    toporbottomarea = 3.1415 * r * r\n    return toporbottomarea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 342.1897888183594}
{"task_id": 534, "code": "import re\n\n\ndef search_literal(pattern, text):\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return (s, e)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 467.00860595703125}
{"task_id": 537, "code": "def first_repeated_word(str1):\n    temp = set()\n    for word in str1.split():\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return \"None\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 387.20703125}
{"task_id": 538, "code": "def string_list_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace())\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.9748840332031}
{"task_id": 536, "code": "def nth_items(list, n):\n    return list[::n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 447.7679748535156}
{"task_id": 539, "code": "def basesnum_coresspondingnum(bases_num, index):\n    result = list(map(pow, bases_num, index))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.8788757324219}
{"task_id": 540, "code": "def find_Diff(arr, n):\n    arr.sort()\n    count = 0\n    max_count = 0\n    min_count = n\n    for i in range(0, (n - 1)):\n        if arr[i] == arr[i + 1]:\n            count += 1\n            continue\n        else:\n            max_count = max(max_count, count)\n            min_count = min(min_count, count)\n            count = 0\n    return max_count - min_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 413.6466979980469}
{"task_id": 541, "code": "import math\n\n\ndef get_sum(n):\n    sum = 0\n    i = 1\n    while i <= (math.sqrt(n)):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + i\n                sum = sum + (n / i)\n        i = i + 1\n    sum = sum - n\n    return sum\n\n\ndef check_abundant(n):\n    if get_sum(n) > n:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 360.6941833496094}
{"task_id": 543, "code": "def count_digits(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        number = number // 10\n        count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 343.7647705078125}
{"task_id": 542, "code": "import re\n\n\ndef fill_spaces(text):\n    return re.sub(\"[ ,.]\", \":\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 455.2111511230469}
{"task_id": 544, "code": "def flatten_tuple(test_list):\n    res = \" \".join([idx for tup in test_list for idx in tup])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 376.8219909667969}
{"task_id": 545, "code": "def take_L_and_F_set_bits(n):\n    n = n | n >> 1\n    n = n | n >> 2\n    n = n | n >> 4\n    n = n | n >> 8\n    n = n | n >> 16\n    return ((n + 1) >> 1) + 1\n\n\ndef toggle_F_and_L_bits(n):\n    if n == 1:\n        return 0\n    return n ^ take_L_and_F_set_bits(n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 375.3500061035156}
{"task_id": 546, "code": "def last_occurence_char(string, char):\n    flag = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            flag = i\n    if flag == -1:\n        return None\n    else:\n        return flag + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 374.68408203125}
{"task_id": 547, "code": "def Total_Hamming_Distance(n):\n    i = 1\n    sum = 0\n    while n // i > 0:\n        sum = sum + n // i\n        i = i * 2\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.7379150390625}
{"task_id": 548, "code": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    longest_increasing_subsequence = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if (\n                arr[i] > arr[j]\n                and longest_increasing_subsequence[i]\n                < longest_increasing_subsequence[j] + 1\n            ):\n                longest_increasing_subsequence[i] = (\n                    longest_increasing_subsequence[j] + 1\n                )\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, longest_increasing_subsequence[i])\n    return maximum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 420.2721252441406}
{"task_id": 549, "code": "def odd_Num_Sum(n):\n    j = 0\n    sm = 0\n    for i in range(1, n + 1):\n        j = 2 * i - 1\n        sm = sm + (j * j * j * j * j)\n    return sm\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 403.859130859375}
{"task_id": 550, "code": "def find_Max(arr, low, high):\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = low + (high - low) // 2\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid - 1]\n    if arr[low] > arr[mid]:\n        return find_Max(arr, low, mid - 1)\n    else:\n        return find_Max(arr, mid + 1, high)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 388.7012023925781}
{"task_id": 551, "code": "def extract_column(list1, n):\n    result = [i.pop(n) for i in list1]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 419.424072265625}
{"task_id": 554, "code": "def Split(list):\n    od_li = []\n    for i in list:\n        if i % 2 != 0:\n            od_li.append(i)\n    return od_li\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 414.9329528808594}
{"task_id": 553, "code": "def tuple_to_float(test_tup):\n    res = float(\".\".join(str(ele) for ele in test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 501.8119812011719}
{"task_id": 555, "code": "def difference(n):\n    S = (n * (n + 1)) // 2\n    res = S * (S - 1)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 385.4620361328125}
{"task_id": 552, "code": "def Seq_Linear(seq_nums):\n    seq_nums = [seq_nums[x] - seq_nums[x - 1] for x in range(1, len(seq_nums))]\n    if len(set(seq_nums)) == 1:\n        return \"Linear Sequence\"\n    else:\n        return \"Non Linear Sequence\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 537.1870727539062}
{"task_id": 556, "code": "def find_Odd_Pair(A, N):\n    oddPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                oddPair += 1\n    return oddPair\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 386.81793212890625}
{"task_id": 557, "code": "def toggle_string(string):\n    string1 = string.swapcase()\n    return string1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 413.869873046875}
{"task_id": 558, "code": "def digit_distance_nums(n1, n2):\n    return sum(map(int, str(abs(n1 - n2))))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.2608337402344}
{"task_id": 559, "code": "def max_sub_array_sum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 358.3519592285156}
{"task_id": 560, "code": "def union_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1 + test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 372.86614990234375}
{"task_id": 561, "code": "def assign_elements(test_list):\n    res = dict()\n    for key, val in test_list:\n        res.setdefault(val, [])\n        res.setdefault(key, []).append(val)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 355.0100402832031}
{"task_id": 562, "code": "def Find_Max_Length(lst):\n    maxLength = max(len(x) for x in lst)\n    return maxLength\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 419.68798828125}
{"task_id": 564, "code": "def count_Pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                cnt += 1\n    return cnt\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 379.2560119628906}
{"task_id": 563, "code": "import re\n\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 478.5299377441406}
{"task_id": 565, "code": "def split(word):\n    return [char for char in word]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 424.6656799316406}
{"task_id": 567, "code": "def issort_list(list1):\n    result = all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 392.8210754394531}
{"task_id": 566, "code": "def sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(int(n / 10))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 451.78411865234375}
{"task_id": 568, "code": "def empty_list(length):\n    empty_list = [{} for _ in range(length)]\n    return empty_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 370.2809753417969}
{"task_id": 569, "code": "def sort_sublists(list1):\n    result = list(map(sorted, list1))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 399.3978576660156}
{"task_id": 570, "code": "def remove_words(list1, charlist):\n    new_list = []\n    for line in list1:\n        new_words = \" \".join(\n            [\n                word\n                for word in line.split()\n                if not any([phrase in word for phrase in charlist])\n            ]\n        )\n        new_list.append(new_words)\n    return new_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 363.1961364746094}
{"task_id": 572, "code": "def two_unique_nums(nums):\n    return [i for i in nums if nums.count(i) == 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 349.51495361328125}
{"task_id": 571, "code": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort()\n    dp = [0] * N\n    dp[0] = 0\n    for i in range(1, N):\n        dp[i] = dp[i - 1]\n        if arr[i] - arr[i - 1] < K:\n            if i >= 2:\n                dp[i] = max(dp[i], dp[i - 2] + arr[i] + arr[i - 1])\n            else:\n                dp[i] = max(dp[i], arr[i] + arr[i - 1])\n    return dp[N - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.4222106933594}
{"task_id": 573, "code": "def unique_product(list_data):\n    temp = list(set(list_data))\n    p = 1\n    for i in temp:\n        p *= i\n    return p\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 383.21685791015625}
{"task_id": 575, "code": "def count_no(A, N, L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % A != 0:\n            count += 1\n        if count == N:\n            break\n    return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 385.07391357421875}
{"task_id": 574, "code": "def surfacearea_cylinder(r, h):\n    surfacearea = (2 * 3.1415 * r * r) + (2 * 3.1415 * r * h)\n    return surfacearea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 415.50921630859375}
{"task_id": 576, "code": "def is_Sub_Array(A, B, n, m):\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == m:\n                return True\n        else:\n            i = i - j + 1\n            j = 0\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 413.55584716796875}
{"task_id": 577, "code": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    elif n <= 2:\n        return n\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 4\n    else:\n        return 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.64404296875}
{"task_id": 579, "code": "def find_dissimilar(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 383.5501708984375}
{"task_id": 578, "code": "def interleave_lists(list1, list2, list3):\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.83819580078125}
{"task_id": 580, "code": "def even_ele(test_tuple, even_fnc):\n    res = tuple()\n    for ele in test_tuple:\n        if isinstance(ele, tuple):\n            res += (even_ele(ele, even_fnc),)\n        elif even_fnc(ele):\n            res += (ele,)\n    return res\n\n\ndef extract_even(test_tuple):\n    res = even_ele(test_tuple, lambda x: x % 2 == 0)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 420.684814453125}
{"task_id": 581, "code": "def surface_Area(b, s):\n    return 2 * b * s + pow(b, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 376.8570556640625}
{"task_id": 582, "code": "def my_dict(dict1):\n    if bool(dict1):\n        return False\n    else:\n        return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.2241516113281}
{"task_id": 583, "code": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 382.34710693359375}
{"task_id": 584, "code": "import re\n\n\ndef find_adverbs(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return \"%d-%d: %s\" % (m.start(), m.end(), m.group(0))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.70294189453125}
{"task_id": 585, "code": "import heapq\n\n\ndef expensive_items(items, n):\n    expensive_items = heapq.nlargest(n, items, key=lambda s: s[\"price\"])\n    return expensive_items\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 378.45086669921875}
{"task_id": 587, "code": "def list_tuple(listx):\n    tuplex = tuple(listx)\n    return tuplex\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 383.81005859375}
{"task_id": 586, "code": "def split_Arr(a, n, k):\n    b = a[:k]\n    return a[k::] + b[::]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 408.5607604980469}
{"task_id": 588, "code": "def big_diff(nums):\n    diff = max(nums) - min(nums)\n    return diff\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 377.51507568359375}
{"task_id": 589, "code": "def perfect_squares(a, b):\n    lists = []\n    for i in range(a, b + 1):\n        j = 1\n        while j * j <= i:\n            if j * j == i:\n                lists.append(i)\n            j = j + 1\n        i = i + 1\n    return lists\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 379.18902587890625}
{"task_id": 591, "code": "def swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 370.32080078125}
{"task_id": 590, "code": "import cmath\n\n\ndef polar_rect(x, y):\n    cn = complex(x, y)\n    cn = cmath.polar(cn)\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 443.21917724609375}
{"task_id": 592, "code": "def binomial_Coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    # nC0 is 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\n\ndef sum_Of_product(n):\n    return binomial_Coeff(2 * n, n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 373.92474365234375}
{"task_id": 595, "code": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return \"Not Possible\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 330.3060607910156}
{"task_id": 593, "code": "import re\n\n\ndef removezero_ip(ip):\n    string = re.sub(\"\\.[0]*\", \".\", ip)\n    return string\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 421.1511535644531}
{"task_id": 594, "code": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even - first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.3399658203125}
{"task_id": 596, "code": "import sys\n\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 389.119140625}
{"task_id": 597, "code": "def find_kth(arr1, arr2, m, n, k):\n    sorted1 = [0] * (m + n)\n    i = 0\n    j = 0\n    d = 0\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            sorted1[d] = arr1[i]\n            i += 1\n        else:\n            sorted1[d] = arr2[j]\n            j += 1\n        d += 1\n    while i < m:\n        sorted1[d] = arr1[i]\n        d += 1\n        i += 1\n    while j < n:\n        sorted1[d] = arr2[j]\n        d += 1\n        j += 1\n    return sorted1[k - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 398.3242492675781}
{"task_id": 598, "code": "def armstrong_number(number):\n    sum = 0\n    times = 0\n    temp = number\n    while temp > 0:\n        times = times + 1\n        temp = temp // 10\n    temp = number\n    while temp > 0:\n        reminder = temp % 10\n        sum = sum + (reminder**times)\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 369.8356018066406}
{"task_id": 599, "code": "def sum_average(number):\n    total = 0\n    for value in range(1, number + 1):\n        total = total + value\n    average = total / number\n    return (total, average)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 417.02984619140625}
{"task_id": 600, "code": "def is_Even(n):\n    if n ^ 1 == n + 1:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.38702392578125}
{"task_id": 602, "code": "def first_repeated_char(str1):\n    for index, c in enumerate(str1):\n        if str1[: index + 1].count(c) > 1:\n            return c\n    return \"None\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 429.1598815917969}
{"task_id": 601, "code": "class Pair(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n\ndef max_chain_length(arr, n):\n    max = 0\n    mcl = [1 for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i].a > arr[j].b and mcl[i] < mcl[j] + 1:\n                mcl[i] = mcl[j] + 1\n    for i in range(n):\n        if max < mcl[i]:\n            max = mcl[i]\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.52508544921875}
{"task_id": 604, "code": "def reverse_words(s):\n    return \" \".join(reversed(s.split()))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 460.4129638671875}
{"task_id": 603, "code": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n    index = 1\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n        index += 1\n    return ludics\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 485.9671630859375}
{"task_id": 605, "code": "def prime_num(num):\n    if num >= 1:\n        for i in range(2, num // 2):\n            if (num % i) == 0:\n                return False\n            else:\n                return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 472.88775634765625}
{"task_id": 606, "code": "import math\n\n\ndef radian_degree(degree):\n    radian = degree * (math.pi / 180)\n    return radian\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.6328735351562}
{"task_id": 608, "code": "def bell_Number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 410.7348937988281}
{"task_id": 607, "code": "import re\n\npattern = \"fox\"\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    s = match.start()\n    e = match.end()\n    return (match.re.pattern, s, e)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 543.864990234375}
{"task_id": 609, "code": "def floor_Min(A, B, N):\n    x = max(B - 1, N)\n    return (A * x) // B\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 412.21307373046875}
{"task_id": 610, "code": "def remove_kth_element(list1, L):\n    return list1[: L - 1] + list1[L:]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 389.1251220703125}
{"task_id": 611, "code": "def max_of_nth(test_list, N):\n    res = max([sub[N] for sub in test_list])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.52874755859375}
{"task_id": 613, "code": "def maximum_value(test_list):\n    res = [(key, max(lst)) for key, lst in test_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 434.895263671875}
{"task_id": 612, "code": "def merge(lst):\n    return [list(ele) for ele in list(zip(*lst))]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 467.6611328125}
{"task_id": 614, "code": "def cummulative_sum(test_list):\n    res = sum(map(sum, test_list))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 351.52197265625}
{"task_id": 615, "code": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 423.1400451660156}
{"task_id": 617, "code": "def min_Jumps(a, b, d):\n    temp = a\n    a = min(a, b)\n    b = max(temp, b)\n    if d >= b:\n        return (d + b - 1) / b\n    if d == 0:\n        return 0\n    if d == a:\n        return 1\n    else:\n        return 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 415.08984375}
{"task_id": 616, "code": "def tuple_modulo(test_tup1, test_tup2):\n    res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 474.7059326171875}
{"task_id": 618, "code": "def div_list(nums1, nums2):\n    result = map(lambda x, y: x / y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 441.9038391113281}
{"task_id": 619, "code": "def move_num(test_str):\n    res = \"\"\n    dig = \"\"\n    for ele in test_str:\n        if ele.isdigit():\n            dig += ele\n        else:\n            res += ele\n    res += dig\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 407.43206787109375}
{"task_id": 620, "code": "def largest_subset(a, n):\n    dp = [0 for i in range(n)]\n    dp[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        mxm = 0\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                mxm = max(mxm, dp[j])\n        dp[i] = 1 + mxm\n    return max(dp)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 414.1790771484375}
{"task_id": 621, "code": "def increment_numerics(test_list, K):\n    res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 547.2538452148438}
{"task_id": 622, "code": "def get_median(arr1, arr2, n):\n    i = 0\n    j = 0\n    m1 = -1\n    m2 = -1\n    count = 0\n    while count < n + 1:\n        count += 1\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.7528076171875}
{"task_id": 623, "code": "def nth_nums(nums, n):\n    nth_nums = list(map(lambda x: x**n, nums))\n    return nth_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.8990478515625}
{"task_id": 624, "code": "def is_upper(string):\n    return string.upper()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 524.343994140625}
{"task_id": 625, "code": "def swap_List(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 593.5029907226562}
{"task_id": 626, "code": "def triangle_area(r):\n    if r < 0:\n        return -1\n    return r * r\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 590.53515625}
{"task_id": 628, "code": "MAX = 1000\n\n\ndef replace_spaces(string):\n    string = string.strip()\n    i = len(string)\n    space_count = string.count(\" \")\n    new_length = i + space_count * 2\n    if new_length > MAX:\n        return -1\n    index = new_length - 1\n    string = list(string)\n    for f in range(i - 2, new_length - 2):\n        string.append(\"0\")\n    for j in range(i - 1, 0, -1):\n        if string[j] == \" \":\n            string[index] = \"0\"\n            string[index - 1] = \"2\"\n            string[index - 2] = \"%\"\n            index = index - 3\n        else:\n            string[index] = string[j]\n            index -= 1\n    return \"\".join(string)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 489.2940673828125}
{"task_id": 627, "code": "def find_First_Missing(array, start, end):\n    if start > end:\n        return end + 1\n    if start != array[start]:\n        return start\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    return find_First_Missing(array, start, mid)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 578.6981811523438}
{"task_id": 629, "code": "def Split(list):\n    ev_li = []\n    for i in list:\n        if i % 2 == 0:\n            ev_li.append(i)\n    return ev_li\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 539.5081176757812}
{"task_id": 630, "code": "def adjac(ele, sub=[]):\n    if not ele:\n        yield sub\n    else:\n        yield from [\n            idx\n            for j in range(ele[0] - 1, ele[0] + 2)\n            for idx in adjac(ele[1:], sub + [j])\n        ]\n\n\ndef get_coordinates(test_tup):\n    res = list(adjac(test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.4878540039062}
{"task_id": 631, "code": "import re\n\ntext = \"Python Exercises\"\n\n\ndef replace_spaces(text):\n    text = text.replace(\" \", \"_\")\n    return text\n    text = text.replace(\"_\", \" \")\n    return text\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 558.9749755859375}
{"task_id": 632, "code": "def move_zero(num_list):\n    a = [0 for i in range(num_list.count(0))]\n    x = [i for i in num_list if i != 0]\n    x.extend(a)\n    return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.2869873046875}
{"task_id": 633, "code": "def pair_OR_Sum(arr, n):\n    ans = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            ans = ans + (arr[i] ^ arr[j])\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 567.4622192382812}
{"task_id": 634, "code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 566.0037841796875}
{"task_id": 635, "code": "import heapq as hq\n\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 515.177001953125}
{"task_id": 636, "code": "def Check_Solution(a, b, c):\n    if a == c:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 506.71673583984375}
{"task_id": 637, "code": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.7340698242188}
{"task_id": 638, "code": "import math\n\n\ndef wind_chill(v, t):\n    windchill = (\n        13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    )\n    return int(round(windchill, 0))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 505.45501708984375}
{"task_id": 640, "code": "import re\n\n\ndef remove_parenthesis(items):\n    for item in items:\n        return re.sub(r\" ?\\([^)]+\\)\", \"\", item)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 493.7579650878906}
{"task_id": 639, "code": "def sample_nam(sample_names):\n    sample_names = list(\n        filter(lambda el: el[0].isupper() and el[1:].islower(), sample_names)\n    )\n    return len(\"\".join(sample_names))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 512.045166015625}
{"task_id": 642, "code": "def remove_similar_row(test_list):\n    res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 545.4761962890625}
{"task_id": 641, "code": "def is_nonagonal(n):\n    return int(n * (7 * n - 5) / 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 592.5671997070312}
{"task_id": 644, "code": "def reverse_Array_Upto_K(input, k):\n    return input[k - 1 :: -1] + input[k:]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.2938232421875}
{"task_id": 643, "code": "import re\n\n\ndef text_match_wordz_middle(text):\n    patterns = \"\\Bz\\B\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 565.9940185546875}
{"task_id": 645, "code": "def get_product(val):\n    res = 1\n    for ele in val:\n        res *= ele\n    return res\n\n\ndef find_k_product(test_list, K):\n    res = get_product([sub[K] for sub in test_list])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 545.156005859375}
{"task_id": 646, "code": "def No_of_cubes(N, K):\n    No = 0\n    No = N - K + 1\n    No = pow(No, 3)\n    return No\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 542.6378173828125}
{"task_id": 648, "code": "from itertools import chain, tee, zip_longest\n\n\ndef exchange_elements(lst):\n    lst1, lst2 = tee(iter(lst), 2)\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.839111328125}
{"task_id": 647, "code": "import re\n\n\ndef split_upperstring(text):\n    return re.findall(\"[A-Z][^A-Z]*\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 607.899169921875}
{"task_id": 649, "code": "def sum_Range_list(nums, m, n):\n    sum_range = 0\n    for i in range(m, n + 1, 1):\n        sum_range += nums[i]\n    return sum_range\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.1510620117188}
{"task_id": 650, "code": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    arr1.sort()\n    arr2.sort()\n    for i in range(0, n - 1):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.8919677734375}
{"task_id": 651, "code": "def check_subset(test_tup1, test_tup2):\n    res = set(test_tup2).issubset(test_tup1)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.6519775390625}
{"task_id": 652, "code": "def matrix_to_list(test_list):\n    temp = [ele for sub in test_list for ele in sub]\n    res = list(zip(*temp))\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 552.6871948242188}
{"task_id": 654, "code": "def rectangle_perimeter(l, b):\n    perimeter = 2 * (l + b)\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 556.304931640625}
{"task_id": 653, "code": "from collections import defaultdict\n\n\ndef grouping_dictionary(l):\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 560.6549072265625}
{"task_id": 655, "code": "def fifth_Power_Sum(n):\n    sm = 0\n    for i in range(1, n + 1):\n        sm = sm + (i * i * i * i * i)\n    return sm\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 552.7420043945312}
{"task_id": 656, "code": "def find_Min_Sum(a, b, n):\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum = sum + abs(a[i] - b[i])\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.7640380859375}
{"task_id": 657, "code": "import math\n\n\ndef first_Digit(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact = fact * i\n        while fact % 10 == 0:\n            fact = int(fact / 10)\n    while fact >= 10:\n        fact = int(fact / 10)\n    return math.floor(fact)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 534.831298828125}
{"task_id": 660, "code": "def find_Points(l1, r1, l2, r2):\n    x = min(l1, l2) if (l1 != l2) else -1\n    y = max(r1, r2) if (r1 != r2) else -1\n    return (x, y)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 564.291015625}
{"task_id": 659, "code": "def Repeat(x):\n    _size = len(x)\n    repeated = []\n    for i in range(_size):\n        k = i + 1\n        for j in range(k, _size):\n            if x[i] == x[j] and x[i] not in repeated:\n                repeated.append(x[i])\n    return repeated\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 574.6738891601562}
{"task_id": 658, "code": "def max_occurrences(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 624.3257446289062}
{"task_id": 662, "code": "def sorted_dict(dict1):\n    sorted_dict = {x: sorted(y) for x, y in dict1.items()}\n    return sorted_dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 581.8860473632812}
{"task_id": 661, "code": "def max_sum_of_three_consecutive(arr, n):\n    sum = [0 for k in range(n)]\n    if n >= 1:\n        sum[0] = arr[0]\n    if n >= 2:\n        sum[1] = arr[0] + arr[1]\n    if n > 2:\n        sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    for i in range(3, n):\n        sum[i] = max(\n            max(sum[i - 1], sum[i - 2] + arr[i]), arr[i] + arr[i - 1] + sum[i - 3]\n        )\n    return sum[n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 593.883056640625}
{"task_id": 663, "code": "import sys\n\n\ndef find_max_val(n, x, y):\n    ans = -sys.maxsize\n    for k in range(n + 1):\n        if k % x == y:\n            ans = max(ans, k)\n    return ans if (ans >= 0 and ans <= n) else -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 606.8291625976562}
{"task_id": 665, "code": "def move_last(num_list):\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\n    x = [i for i in num_list if i != num_list[0]]\n    x.extend(a)\n    return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 513.3290405273438}
{"task_id": 664, "code": "def average_Even(n):\n    if n % 2 != 0:\n        return \"Invalid Input\"\n        return -1\n    sm = 0\n    count = 0\n    while n >= 2:\n        count = count + 1\n        sm = sm + n\n        n = n - 2\n    return sm // count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 639.1849365234375}
{"task_id": 667, "code": "def Check_Vow(string, vowels):\n    final = [each for each in string if each in vowels]\n    return len(final)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 510.9307861328125}
{"task_id": 666, "code": "def count_char(string, char):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == char:\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "errors": [""]}], "exec_time_ms": 530.4231567382812}
{"task_id": 668, "code": "import re\n\n\ndef replace(string, char):\n    pattern = char + \"{2,}\"\n    string = re.sub(pattern, char, string)\n    return string\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 527.5079956054688}
{"task_id": 669, "code": "import re\r\n\r\nregex = \"\"\"^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$\"\"\"\n\n\ndef check_IP(Ip):\n    if re.search(regex, Ip):\n        return \"Valid IP address\"\n    else:\n        return \"Invalid IP address\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.583984375}
{"task_id": 670, "code": "def decreasing_trend(nums):\n    if sorted(nums) == nums:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 549.3538208007812}
{"task_id": 671, "code": "import math\n\n\ndef get_Pos_Of_Right_most_Set_Bit(n):\n    return int(math.log2(n & -n) + 1)\n\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)\n    return (1 << (pos - 1)) | n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.5069580078125}
{"task_id": 672, "code": "def max_of_three(num1, num2, num3):\n    if (num1 >= num2) and (num1 >= num3):\n        lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n        lnum = num2\n    else:\n        lnum = num3\n    return lnum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.4248046875}
{"task_id": 673, "code": "def convert(list):\n    s = [str(i) for i in list]\n    res = int(\"\".join(s))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 549.64111328125}
{"task_id": 674, "code": "from collections import OrderedDict\n\n\ndef remove_duplicate(string):\n    result = \" \".join(OrderedDict((w, w) for w in string.split()).keys())\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.2559814453125}
{"task_id": 676, "code": "import re\n\n\ndef remove_extra_char(text1):\n    pattern = re.compile(\"[\\W_]+\")\n    return pattern.sub(\"\", text1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.008056640625}
{"task_id": 675, "code": "def sum_nums(x, y, m, n):\n    sum_nums = x + y\n    if sum_nums in range(m, n):\n        return 20\n    else:\n        return sum_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.3128051757812}
{"task_id": 677, "code": "def validity_triangle(a, b, c):\n    total = a + b + c\n    if total == 180:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 537.6751708984375}
{"task_id": 678, "code": "def remove_spaces(str1):\n    str1 = str1.replace(\" \", \"\")\n    return str1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.6392211914062}
{"task_id": 679, "code": "def access_key(ditionary, key):\n    return list(ditionary)[key]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.1117553710938}
{"task_id": 680, "code": "def increasing_trend(nums):\n    if sorted(nums) == nums:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 530.82275390625}
{"task_id": 681, "code": "def smallest_Divisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 490.39508056640625}
{"task_id": 682, "code": "def mul_list(nums1, nums2):\n    result = map(lambda x, y: x * y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 534.3870849609375}
{"task_id": 683, "code": "def sum_Square(n):\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i + j * j == n:\n                return True\n            j = j + 1\n        i = i + 1\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.9130249023438}
{"task_id": 684, "code": "def count_Char(str, x):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == x:\n            count += 1\n    n = 10\n    repititions = n // len(str)\n    count = count * repititions\n    l = n % len(str)\n    for i in range(l):\n        if str[i] == x:\n            count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 532.9348754882812}
{"task_id": 686, "code": "from collections import defaultdict\n\n\ndef freq_element(test_tup):\n    res = defaultdict(int)\n    for ele in test_tup:\n        res[ele] += 1\n    return str(dict(res))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 521.778076171875}
{"task_id": 685, "code": "def sum_Of_Primes(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            i = p * 2\n            while i <= n:\n                prime[i] = False\n                i += p\n        p += 1\n    sum = 0\n    for i in range(2, n + 1):\n        if prime[i]:\n            sum += i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.7059326171875}
{"task_id": 687, "code": "def recur_gcd(a, b):\n    low = min(a, b)\n    high = max(a, b)\n    if low == 0:\n        return high\n    elif low == 1:\n        return 1\n    else:\n        return recur_gcd(low, high % low)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.8610229492188}
{"task_id": 688, "code": "import cmath\n\n\ndef len_complex(a, b):\n    cn = complex(a, b)\n    length = abs(cn)\n    return length\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.6910400390625}
{"task_id": 689, "code": "def min_jumps(arr, n):\n    jumps = [0 for i in range(n)]\n    if (n == 0) or (arr[0] == 0):\n        return float(\"inf\")\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = float(\"inf\")\n        for j in range(i):\n            if (i <= j + arr[j]) and (jumps[j] != float(\"inf\")):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.255859375}
{"task_id": 690, "code": "def mul_consecutive_nums(nums):\n    result = [b * a for a, b in zip(nums[:-1], nums[1:])]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 541.2271118164062}
{"task_id": 691, "code": "from itertools import groupby\n\n\ndef group_element(test_list):\n    res = dict()\n    for key, val in groupby(\n        sorted(test_list, key=lambda ele: ele[1]), key=lambda ele: ele[1]\n    ):\n        res[key] = [ele[0] for ele in val]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 553.4703979492188}
{"task_id": 692, "code": "def last_Two_Digits(N):\n    if N >= 10:\n        return\n    fac = 1\n    for i in range(1, N + 1):\n        fac = (fac * i) % 100\n    return fac\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 542.530029296875}
{"task_id": 694, "code": "def extract_unique(test_dict):\n    res = list(sorted({ele for val in test_dict.values() for ele in val}))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 510.639892578125}
{"task_id": 693, "code": "import re\n\n\ndef remove_multiple_spaces(text1):\n    return re.sub(\" +\", \" \", text1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 535.8250122070312}
{"task_id": 697, "code": "def count_even(array_nums):\n    count_even = len(list(filter(lambda x: (x % 2 == 0), array_nums)))\n    return count_even\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 507.80487060546875}
{"task_id": 695, "code": "def check_greater(test_tup1, test_tup2):\n    res = all(x < y for x, y in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 559.7410278320312}
{"task_id": 696, "code": "def zip_list(list1, list2):\n    result = list(map(list.__add__, list1, list2))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 558.5469970703125}
{"task_id": 698, "code": "def sort_dict_item(test_dict):\n    res = {\n        key: test_dict[key]\n        for key in sorted(test_dict.keys(), key=lambda ele: ele[1] * ele[0])\n    }\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 530.8800048828125}
{"task_id": 700, "code": "def count_range_in_list(li, min, max):\n    ctr = 0\n    for x in li:\n        if min <= x <= max:\n            ctr += 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 577.9840698242188}
{"task_id": 699, "code": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    if count % 2 == 0:\n        return count // 2\n    else:\n        return \"Not Possible\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 603.6358032226562}
{"task_id": 701, "code": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 603.9349975585938}
{"task_id": 702, "code": "def find_ind(key, i, n, k, arr):\n    ind = -1\n    start = i + 1\n    end = n - 1\n    while start < end:\n        mid = int(start + (end - start) / 2)\n        if arr[mid] - key <= k:\n            ind = mid\n            start = mid + 1\n        else:\n            end = mid\n    return ind\n\n\ndef removals(arr, n, k):\n    ans = n - 1\n    arr.sort()\n    for i in range(0, n):\n        j = find_ind(arr[i], i, n, k, arr)\n        if j != -1:\n            ans = min(ans, n - (j - i + 1))\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 588.286865234375}
{"task_id": 703, "code": "def is_key_present(d, x):\n    if x in d:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 524.0828857421875}
{"task_id": 704, "code": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 520.333740234375}
{"task_id": 705, "code": "def sort_sublists(list1):\n    list1.sort()\n    list1.sort(key=len)\n    return list1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 544.1541748046875}
{"task_id": 706, "code": "def is_subset(arr1, m, arr2, n):\n    hashset = set()\n    for i in range(0, m):\n        hashset.add(arr1[i])\n    for i in range(0, n):\n        if arr2[i] in hashset:\n            continue\n        else:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.601806640625}
{"task_id": 707, "code": "def count_Set_Bits(n):\n    n += 1\n    powerOf2 = 2\n    cnt = n // 2\n    while powerOf2 <= n:\n        totalPairs = n // powerOf2\n        cnt += (totalPairs // 2) * powerOf2\n        if totalPairs & 1:\n            cnt += n % powerOf2\n        else:\n            cnt += 0\n        powerOf2 <<= 1\n    return cnt\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 537.3399047851562}
{"task_id": 708, "code": "def Convert(string):\n    li = list(string.split(\" \"))\n    return li\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 525.5379638671875}
{"task_id": 710, "code": "def front_and_rear(test_tup):\n    res = (test_tup[0], test_tup[-1])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 500.7917785644531}
{"task_id": 709, "code": "from collections import defaultdict\n\n\ndef get_unique(test_list):\n    res = defaultdict(list)\n    for sub in test_list:\n        res[sub[1]].append(sub[0])\n    res = dict(res)\n    res_dict = dict()\n    for key in res:\n        res_dict[key] = len(list(set(res[key])))\n    return str(res_dict)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 518.026123046875}
{"task_id": 712, "code": "import itertools\n\n\ndef remove_duplicate(list1):\n    list.sort(list1)\n    remove_duplicate = list(list1 for list1, _ in itertools.groupby(list1))\n    return remove_duplicate\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 534.3380126953125}
{"task_id": 713, "code": "def check_valid(test_tup):\n    res = not any(map(lambda ele: not ele, test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 575.9927978515625}
{"task_id": 711, "code": "def product_Equal(n):\n    if n < 10:\n        return False\n    prodOdd = 1\n    prodEven = 1\n    while n > 0:\n        digit = n % 10\n        prodOdd *= digit\n        n = n // 10\n        if n == 0:\n            break\n        digit = n % 10\n        prodEven *= digit\n        n = n // 10\n    if prodOdd == prodEven:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 626.567138671875}
{"task_id": 714, "code": "def count_Fac(n):\n    m = n\n    count = 0\n    i = 2\n    while (i * i) <= m:\n        total = 0\n        while n % i == 0:\n            n /= i\n            total += 1\n        temp = 0\n        j = 1\n        while (temp + j) <= total:\n            temp += j\n            count += 1\n            j += 1\n        i += 1\n    if n != 1:\n        count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 524.0330810546875}
{"task_id": 715, "code": "def str_to_tuple(test_str):\n    res = tuple(map(int, test_str.split(\", \")))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 542.6192016601562}
{"task_id": 716, "code": "def rombus_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 599.8101196289062}
{"task_id": 717, "code": "import math\nimport sys\n\n\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean, sd = avg_calc(data), 0.0\n    for el in data:\n        sd += (float(el) - mean) ** 2\n    sd = math.sqrt(sd / float(n - 1))\n    return sd\n\n\ndef avg_calc(ls):\n    n, mean = len(ls), 0.0\n    if n <= 1:\n        return ls[0]\n    for el in ls:\n        mean = mean + float(el)\n    mean = mean / float(n)\n    return mean\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 586.822998046875}
{"task_id": 718, "code": "def alternate_elements(list1):\n    result = []\n    for item in list1[::2]:\n        result.append(item)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 547.5220947265625}
{"task_id": 719, "code": "import re\n\n\ndef text_match(text):\n    patterns = \"ab*?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 539.0758666992188}
{"task_id": 720, "code": "def add_dict_to_tuple(test_tup, test_dict):\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 547.9669799804688}
{"task_id": 722, "code": "def filter_data(students, h, w):\n    result = {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 523.761962890625}
{"task_id": 721, "code": "M = 100\n\n\ndef maxAverageOfPath(cost, N):\n    dp = [[0 for i in range(N + 1)] for j in range(N + 1)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    return dp[N - 1][N - 1] / (2 * N - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 580.037841796875}
{"task_id": 723, "code": "from operator import eq\n\n\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 539.9720458984375}
{"task_id": 724, "code": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 498.1780090332031}
{"task_id": 726, "code": "def multiply_elements(test_tup):\n    res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.5280151367188}
{"task_id": 725, "code": "import re\n\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 578.8698120117188}
{"task_id": 727, "code": "import re\n\n\ndef remove_char(S):\n    result = re.sub(\"[\\W_]+\", \"\", S)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 550.0407104492188}
{"task_id": 728, "code": "def sum_list(lst1, lst2):\n    res_list = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return res_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 585.2439575195312}
{"task_id": 730, "code": "from itertools import groupby\n\n\ndef consecutive_duplicates(nums):\n    return [key for key, group in groupby(nums)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 540.2553100585938}
{"task_id": 729, "code": "def add_list(nums1, nums2):\n    result = map(lambda x, y: x + y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 569.3850708007812}
{"task_id": 732, "code": "import re\n\n\ndef replace_specialchar(text):\n    return re.sub(\"[ ,.]\", \":\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 550.5402221679688}
{"task_id": 731, "code": "import math\n\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r * r + h * h)\n    LSA = math.pi * r * l\n    return LSA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 584.105224609375}
{"task_id": 733, "code": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 573.6520385742188}
{"task_id": 734, "code": "def sum_Of_Subarray_Prod(arr, n):\n    ans = 0\n    res = 0\n    i = n - 1\n    while i >= 0:\n        incr = arr[i] * (1 + res)\n        ans += incr\n        res = incr\n        i -= 1\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.7708740234375}
{"task_id": 735, "code": "def set_middle_bits(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return (n >> 1) ^ 1\n\n\ndef toggle_middle_bits(n):\n    if n == 1:\n        return 1\n    return n ^ set_middle_bits(n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 540.9200439453125}
{"task_id": 736, "code": "import bisect\n\n\ndef left_insertion(a, x):\n    i = bisect.bisect_left(a, x)\n    return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.3831176757812}
{"task_id": 738, "code": "def geometric_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 522.7408447265625}
{"task_id": 737, "code": "import re\n\nregex = \"^[aeiouAEIOU][A-Za-z0-9_]*\"\n\n\ndef check_str(string):\n    if re.search(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 584.8770141601562}
{"task_id": 739, "code": "import math\n\n\ndef find_Index(n):\n    x = math.sqrt(2 * math.pow(10, (n - 1)))\n    return round(x)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 580.5906982421875}
{"task_id": 740, "code": "def tuple_to_dict(test_tup):\n    res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 580.26123046875}
{"task_id": 741, "code": "def all_Characters_Same(s):\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 556.4153442382812}
{"task_id": 742, "code": "import math\n\n\ndef area_tetrahedron(side):\n    area = math.sqrt(3) * (side * side)\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 576.1961669921875}
{"task_id": 743, "code": "def rotate_right(list1, m, n):\n    result = list1[-(m):] + list1[:-(n)]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 578.3097534179688}
{"task_id": 744, "code": "def check_none(test_tup):\n    res = any(map(lambda ele: ele is None, test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.0531005859375}
{"task_id": 745, "code": "def divisible_by_digits(startnum, endnum):\n    return [\n        n\n        for n in range(startnum, endnum + 1)\n        if not any(map(lambda x: int(x) == 0 or n % int(x) != 0, str(n)))\n    ]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.4599609375}
{"task_id": 746, "code": "def sector_area(r, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    sectorarea = (pi * r**2) * (a / 360)\n    return sectorarea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 521.4888916015625}
{"task_id": 747, "code": "def lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for i in range(o + 1)] for j in range(n + 1)] for k in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]\n                    )\n    return L[m][n][o]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.4788818359375}
{"task_id": 748, "code": "import re\n\n\ndef capital_words_spaces(str1):\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 594.5439453125}
{"task_id": 749, "code": "def sort_numeric_strings(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 546.0889282226562}
{"task_id": 750, "code": "def add_tuple(test_list, test_tup):\n    test_list += test_tup\n    return test_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 549.0419921875}
{"task_id": 751, "code": "def check_min_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (\n        arr[i] <= arr[2 * i + 2] and check_min_heap(arr, 2 * i + 2)\n    )\n    return left_child and right_child\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 542.8442993164062}
{"task_id": 752, "code": "def jacobsthal_num(n):\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 2 * dp[i - 2]\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.3519287109375}
{"task_id": 753, "code": "def min_k(test_list, K):\n    res = sorted(test_list, key=lambda x: x[1])[:K]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 567.0029907226562}
{"task_id": 754, "code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 539.1611938476562}
{"task_id": 755, "code": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return\n    if (len(numbers) == 2) and (numbers[0] == numbers[1]):\n        return\n    dup_items = set()\n    uniq_items = []\n    for x in numbers:\n        if x not in dup_items:\n            uniq_items.append(x)\n            dup_items.add(x)\n    uniq_items.sort()\n    return uniq_items[1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 525.9108276367188}
{"task_id": 756, "code": "import re\n\n\ndef text_match_zero_one(text):\n    patterns = \"ab?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 502.2189636230469}
{"task_id": 757, "code": "def count_reverse_pairs(test_list):\n    res = sum(\n        [\n            1\n            for idx in range(0, len(test_list))\n            for idxn in range(idx, len(test_list))\n            if test_list[idxn] == str(\"\".join(list(reversed(test_list[idx]))))\n        ]\n    )\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 540.3661499023438}
{"task_id": 758, "code": "def unique_sublists(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 554.5217895507812}
{"task_id": 759, "code": "import re\n\n\ndef is_decimal(num):\n    import re\n\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = dnumre.search(num)\n    return bool(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 552.7958984375}
{"task_id": 760, "code": "def unique_Element(arr, n):\n    s = set(arr)\n    if len(s) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.5320434570312}
{"task_id": 762, "code": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.795166015625}
{"task_id": 761, "code": "def arc_length(d, a):\n    pi = 22 / 7\n    if a >= 360:\n        return None\n    arclength = (pi * d) * (a / 360)\n    return arclength\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 540.7788696289062}
{"task_id": 763, "code": "def find_Min_Diff(arr, n):\n    arr = sorted(arr)\n    diff = 10**20\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] < diff:\n            diff = arr[i + 1] - arr[i]\n    return diff\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.8980102539062}
{"task_id": 764, "code": "def number_ctr(str):\n    number_ctr = 0\n    for i in range(len(str)):\n        if str[i] >= \"0\" and str[i] <= \"9\":\n            number_ctr += 1\n    return number_ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 564.983154296875}
{"task_id": 765, "code": "import math\n\n\ndef is_polite(n):\n    n = n + 1\n    return (int)(n + (math.log((n + math.log(n, 2)), 2)))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 598.0868530273438}
{"task_id": 766, "code": "def pair_wise(l1):\n    temp = []\n    for i in range(len(l1) - 1):\n        current_element, next_element = l1[i], l1[i + 1]\n        x = (current_element, next_element)\n        temp.append(x)\n    return temp\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 572.2958984375}
{"task_id": 768, "code": "def check_Odd_Parity(x):\n    parity = 0\n    while x != 0:\n        x = x & (x - 1)\n        parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 631.4151000976562}
{"task_id": 767, "code": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 659.098876953125}
{"task_id": 770, "code": "def odd_Num_Sum(n):\n    j = 0\n    sm = 0\n    for i in range(1, n + 1):\n        j = 2 * i - 1\n        sm = sm + (j * j * j * j)\n    return sm\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 583.7728881835938}
{"task_id": 769, "code": "def Diff(li1, li2):\n    return list(list(set(li1) - set(li2)) + list(set(li2) - set(li1)))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 608.3529052734375}
{"task_id": 772, "code": "def remove_length(test_str, K):\n    temp = test_str.split()\n    res = [ele for ele in temp if len(ele) != K]\n    res = \" \".join(res)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 521.5320434570312}
{"task_id": 771, "code": "from collections import deque\n\n\ndef check_expression(exp):\n    if len(exp) & 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == \"(\" or ch == \"{\" or ch == \"[\":\n            stack.append(ch)\n        if ch == \")\" or ch == \"}\" or ch == \"]\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == \"(\" and ch != \")\") or (\n                top == \"{\" and ch != \"}\" or (top == \"[\" and ch != \"]\")\n            ):\n                return False\n    return not stack\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 559.8871459960938}
{"task_id": 773, "code": "import re\n\n\ndef occurance_substring(text, pattern):\n    for match in re.finditer(pattern, text):\n        s = match.start()\n        e = match.end()\n        return (text[s:e], s, e)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 561.6820068359375}
{"task_id": 774, "code": "import re\n\nregex = \"^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$\"\n\n\ndef check_email(email):\n    if re.search(regex, email):\n        return \"Valid Email\"\n    else:\n        return \"Invalid Email\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.1491088867188}
{"task_id": 775, "code": "def odd_position(nums):\n    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 569.1878662109375}
{"task_id": 778, "code": "from itertools import groupby\n\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for key, group in groupby(list1)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 557.4901123046875}
{"task_id": 777, "code": "def find_Sum(arr, n):\n    arr.sort()\n    sum = arr[0]\n    for i in range(0, n - 1):\n        if arr[i] != arr[i + 1]:\n            sum = sum + arr[i + 1]\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 576.7979736328125}
{"task_id": 776, "code": "def count_vowels(test_str):\n    res = 0\n    vow_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for idx in range(1, len(test_str) - 1):\n        if test_str[idx] not in vow_list and (\n            test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list\n        ):\n            res += 1\n    if test_str[0] not in vow_list and test_str[1] in vow_list:\n        res += 1\n    if test_str[-1] not in vow_list and test_str[-2] in vow_list:\n        res += 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 616.6429443359375}
{"task_id": 779, "code": "def unique_sublists(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), list()).append(1)\n    for a, b in result.items():\n        result[a] = sum(b)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 549.1912231445312}
{"task_id": 780, "code": "from itertools import combinations\n\n\ndef find_combinations(test_list):\n    res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.3728637695312}
{"task_id": 782, "code": "def Odd_Length_Sum(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += (((i + 1) * (l - i) + 1) // 2) * arr[i]\n    return Sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 450.0789794921875}
{"task_id": 781, "code": "import math\n\n\ndef count_Divisors(n):\n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2):\n        if n % i == 0:\n            if n // i == i:\n                count = count + 1\n            else:\n                count = count + 2\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 504.38714599609375}
{"task_id": 784, "code": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even * first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.1639709472656}
{"task_id": 783, "code": "def rgb_to_hsv(r, g, b):\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n    v = mx * 100\n    return h, s, v\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 469.0358581542969}
{"task_id": 785, "code": "def tuple_str_int(test_str):\n    res = tuple(\n        int(num)\n        for num in test_str.replace(\"(\", \"\")\n        .replace(\")\", \"\")\n        .replace(\"...\", \"\")\n        .split(\", \")\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.5382080078125}
{"task_id": 786, "code": "import bisect\n\n\ndef right_insertion(a, x):\n    i = bisect.bisect_right(a, x)\n    return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 459.01702880859375}
{"task_id": 788, "code": "def new_tuple(test_list, test_str):\n    res = tuple(test_list + [test_str])\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 352.26177978515625}
{"task_id": 789, "code": "from math import pi, tan\n\n\ndef perimeter_polygon(s, l):\n    perimeter = s * l\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 358.4609069824219}
{"task_id": 787, "code": "import re\n\n\ndef text_match_three(text):\n    patterns = \"ab{3}?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 499.1469421386719}
{"task_id": 790, "code": "def even_position(nums):\n    return all(nums[i] % 2 == i % 2 for i in range(len(nums)))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.2138977050781}
{"task_id": 792, "code": "def count_list(input_list):\n    return len(input_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 354.5179443359375}
{"task_id": 791, "code": "def remove_nested(test_tup):\n    res = tuple()\n    for count, ele in enumerate(test_tup):\n        if not isinstance(ele, tuple):\n            res = res + (ele,)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 373.9078063964844}
{"task_id": 795, "code": "import heapq\n\n\ndef cheap_items(items, n):\n    cheap_items = heapq.nsmallest(n, items, key=lambda s: s[\"price\"])\n    return cheap_items\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 420.17913818359375}
{"task_id": 793, "code": "def last(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 451.4040832519531}
{"task_id": 794, "code": "import re\n\n\ndef text_starta_endb(text):\n    patterns = \"a.*?b$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 468.98626708984375}
{"task_id": 796, "code": "def return_sum(dict):\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 372.9241027832031}
{"task_id": 797, "code": "def sum_Odd(n):\n    terms = (n + 1) // 2\n    sum1 = terms * terms\n    return sum1\n\n\ndef sum_in_Range(l, r):\n    return sum_Odd(r) - sum_Odd(l - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 359.84588623046875}
{"task_id": 798, "code": "def _sum(arr):\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 364.1190490722656}
{"task_id": 799, "code": "INT_BITS = 32\n\n\ndef left_Rotate(n, d):\n    return (n << d) | (n >> (INT_BITS - d))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 361.9630432128906}
{"task_id": 800, "code": "import re\n\n\ndef remove_all_spaces(text):\n    return re.sub(r\"\\s+\", \"\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 448.88018798828125}
{"task_id": 802, "code": "def count_Rotation(arr, n):\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 369.11273193359375}
{"task_id": 801, "code": "def test_three_equal(x, y, z):\n    result = set([x, y, z])\n    if len(result) == 3:\n        return 0\n    else:\n        return 4 - len(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 385.13397216796875}
{"task_id": 804, "code": "def is_Product_Even(arr, n):\n    for i in range(0, n):\n        if (arr[i] & 1) == 0:\n            return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 363.5921630859375}
{"task_id": 803, "code": "def is_Perfect_Square(n):\n    i = 1\n    while i * i <= n:\n        if (n % i == 0) and (n / i == i):\n            return True\n        i = i + 1\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 410.9561462402344}
{"task_id": 805, "code": "def max_sum_list(lists):\n    return max(lists, key=sum)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 387.89605712890625}
{"task_id": 806, "code": "def max_run_uppercase(test_str):\n    cnt = 0\n    res = 0\n    for idx in range(0, len(test_str)):\n        if test_str[idx].isupper():\n            cnt += 1\n        else:\n            res = cnt\n            cnt = 0\n    if test_str[len(test_str) - 1].isupper():\n        res = cnt\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 395.4908752441406}
{"task_id": 807, "code": "def first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 != 0), -1)\n    return first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 394.0701599121094}
{"task_id": 808, "code": "def check_K(test_tup, K):\n    res = False\n    for ele in test_tup:\n        if ele == K:\n            res = True\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 411.00811767578125}
{"task_id": 809, "code": "def check_smaller(test_tup1, test_tup2):\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 349.4482116699219}
{"task_id": 811, "code": "def check_identical(test_list1, test_list2):\n    res = test_list1 == test_list2\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 384.7968444824219}
{"task_id": 810, "code": "from collections import Counter\n\n\ndef count_variable(a, b, c, d):\n    c = Counter(p=a, q=b, r=c, s=d)\n    return list(c.elements())\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 428.82513427734375}
{"task_id": 813, "code": "def string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 375.0352783203125}
{"task_id": 812, "code": "import re\n\n\ndef road_rd(street):\n    return re.sub(\"Road$\", \"Rd.\", street)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 437.76513671875}
{"task_id": 814, "code": "def rombus_area(p, q):\n    area = (p * q) / 2\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 384.9742431640625}
{"task_id": 815, "code": "def sort_by_dnf(arr, n):\n    low = 0\n    mid = 0\n    high = n - 1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low = low + 1\n            mid = mid + 1\n        elif arr[mid] == 1:\n            mid = mid + 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high = high - 1\n    return arr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 377.573974609375}
{"task_id": 817, "code": "def div_of_nums(nums, m, n):\n    result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 323.0318908691406}
{"task_id": 816, "code": "def clear_tuple(test_tup):\n    temp = list(test_tup)\n    temp.clear()\n    test_tup = tuple(temp)\n    return test_tup\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 346.41790771484375}
{"task_id": 820, "code": "def check_monthnum_number(monthnum1):\n    if monthnum1 == 2:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 359.0660095214844}
{"task_id": 818, "code": "def lower_ctr(str):\n    lower_ctr = 0\n    for i in range(len(str)):\n        if str[i] >= \"a\" and str[i] <= \"z\":\n            lower_ctr += 1\n    return lower_ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.92999267578125}
{"task_id": 819, "code": "def count_duplic(lists):\n    element = []\n    frequency = []\n    if not lists:\n        return element\n    running_count = 1\n    for i in range(len(lists) - 1):\n        if lists[i] == lists[i + 1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lists[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lists[i + 1])\n    return element, frequency\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 487.73455810546875}
{"task_id": 821, "code": "import collections as ct\n\n\ndef merge_dictionaries(dict1, dict2):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\n    return merged_dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 482.9518737792969}
{"task_id": 822, "code": "import re\n\n\ndef pass_validity(p):\n    x = True\n    while x:\n        if len(p) < 6 or len(p) > 12:\n            break\n        elif not re.search(\"[a-z]\", p):\n            break\n        elif not re.search(\"[0-9]\", p):\n            break\n        elif not re.search(\"[A-Z]\", p):\n            break\n        elif not re.search(\"[$#@]\", p):\n            break\n        elif re.search(\"\\s\", p):\n            break\n        else:\n            return True\n            x = False\n            break\n    if x:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 553.4799194335938}
{"task_id": 823, "code": "import re\n\n\ndef check_substring(string, sample):\n    if sample in string:\n        y = \"\\A\" + sample\n        x = re.search(y, string)\n        if x:\n            return \"string starts with the given substring\"\n        else:\n            return \"string doesnt start with the given substring\"\n    else:\n        return \"entered string isnt a substring\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 523.4158325195312}
{"task_id": 825, "code": "def access_elements(nums, list_index):\n    result = [nums[i] for i in list_index]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 502.6969909667969}
{"task_id": 824, "code": "def remove_even(l):\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.41796875}
{"task_id": 826, "code": "def check_Type_Of_Triangle(a, b, c):\n    sqa = pow(a, 2)\n    sqb = pow(b, 2)\n    sqc = pow(c, 2)\n    if sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb:\n        return \"Right-angled Triangle\"\n    elif sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb:\n        return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 440.52313232421875}
{"task_id": 827, "code": "def sum_column(list1, C):\n    result = sum(row[C] for row in list1)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 436.13409423828125}
{"task_id": 828, "code": "def count_alpha_dig_spl(string):\n    alphabets = digits = special = 0\n    for i in range(len(string)):\n        if string[i].isalpha():\n            alphabets = alphabets + 1\n        elif string[i].isdigit():\n            digits = digits + 1\n        else:\n            special = special + 1\n    return (alphabets, digits, special)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 409.85296630859375}
{"task_id": 829, "code": "from collections import Counter\n\n\ndef second_frequent(input):\n    dict = Counter(input)\n    value = sorted(dict.values(), reverse=True)\n    second_large = value[1]\n    for key, val in dict.items():\n        if val == second_large:\n            return key\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.5297546386719}
{"task_id": 830, "code": "import math\n\n\ndef round_up(a, digits):\n    n = 10**-digits\n    return round(math.ceil(a / n) * n, digits)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 387.32196044921875}
{"task_id": 831, "code": "def count_Pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.53118896484375}
{"task_id": 833, "code": "def get_key(dict):\n    list = []\n    for key in dict.keys():\n        list.append(key)\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 393.0041809082031}
{"task_id": 834, "code": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    matrix = [row[:] for row in [[0] * n] * n]\n    row_st = 0\n    row_ed = n - 1\n    col_st = 0\n    col_ed = n - 1\n    current = 1\n    while True:\n        if current > n * n:\n            break\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = current\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = current\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = current\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = current\n            current += 1\n        col_st += 1\n    return matrix\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 431.4539489746094}
{"task_id": 835, "code": "def slope(x1, y1, x2, y2):\n    return (float)(y2 - y1) / (x2 - x1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 432.49200439453125}
{"task_id": 832, "code": "import re\n\n\ndef extract_max(input):\n    numbers = re.findall(\"\\d+\", input)\n    numbers = map(int, numbers)\n    return max(numbers)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 520.6341552734375}
{"task_id": 836, "code": "from sys import maxsize\n\n\ndef max_sub_array_sum(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return end - start + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 394.306884765625}
{"task_id": 837, "code": "def cube_Sum(n):\n    sum = 0\n    for i in range(0, n):\n        sum += (2 * i + 1) * (2 * i + 1) * (2 * i + 1)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 427.4852294921875}
{"task_id": 838, "code": "def min_Swaps(s1, s2):\n    c0 = 0\n    c1 = 0\n    for i in range(len(s1)):\n        if s1[i] == \"0\" and s2[i] == \"1\":\n            c0 += 1\n        elif s1[i] == \"1\" and s2[i] == \"0\":\n            c1 += 1\n    result = c0 // 2 + c1 // 2\n    if c0 % 2 == 0 and c1 % 2 == 0:\n        return result\n    elif (c0 + c1) % 2 == 0:\n        return result + 2\n    else:\n        return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 402.41790771484375}
{"task_id": 839, "code": "def sort_tuple(tup):\n    n = len(tup)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if tup[j][0] > tup[j + 1][0]:\n                tup[j], tup[j + 1] = tup[j + 1], tup[j]\n    return tup\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.4511413574219}
{"task_id": 840, "code": "def Check_Solution(a, b, c):\n    if b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 402.34588623046875}
{"task_id": 841, "code": "def get_inv_count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 351.8309631347656}
{"task_id": 842, "code": "def get_odd_occurence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 390.655029296875}
{"task_id": 844, "code": "def get_Number(n, k):\n    arr = [0] * n\n    i = 0\n    odd = 1\n    while odd <= n:\n        arr[i] = odd\n        i += 1\n        odd += 2\n    even = 2\n    while even <= n:\n        arr[i] = even\n        i += 1\n        even += 2\n    return arr[k - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 375.74981689453125}
{"task_id": 845, "code": "import math\n\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    x = n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0\n    return math.floor(x) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 353.0540466308594}
{"task_id": 843, "code": "import heapq\n\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n\n    merged = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(merged)\n        if ugly != uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 422.0359191894531}
{"task_id": 846, "code": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n        if plat_needed > result:\n            result = plat_needed\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 378.9761047363281}
{"task_id": 847, "code": "def lcopy(xs):\n    return xs[:]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.07977294921875}
{"task_id": 848, "code": "def area_trapezium(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 391.5347900390625}
{"task_id": 849, "code": "def Sum(N):\n    SumOfPrimeDivisors = [0] * (N + 1)\n    for i in range(2, N + 1):\n        if SumOfPrimeDivisors[i] == 0:\n            for j in range(i, N + 1, i):\n                SumOfPrimeDivisors[j] += i\n    return SumOfPrimeDivisors[N]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 361.785888671875}
{"task_id": 851, "code": "def Sum_of_Inverse_Divisors(N, Sum):\n    ans = float(Sum) * 1.0 / float(N)\n    return round(ans, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.83282470703125}
{"task_id": 852, "code": "def remove_negs(num_list):\n    for item in num_list:\n        if item < 0:\n            num_list.remove(item)\n    return num_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 390.08905029296875}
{"task_id": 850, "code": "def is_triangleexists(a, b, c):\n    if a != 0 and b != 0 and c != 0 and (a + b + c) == 180:\n        if (a + b) >= c or (b + c) >= a or (a + c) >= b:\n            return True\n        else:\n            return False\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 431.0309753417969}
{"task_id": 854, "code": "import heapq as hq\n\n\ndef raw_heap(rawheap):\n    hq.heapify(rawheap)\n    return rawheap\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 381.4859313964844}
{"task_id": 853, "code": "import math\n\n\ndef sum_of_odd_Factors(n):\n    res = 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            count += 1\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= 1 + n\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 430.5887145996094}
{"task_id": 855, "code": "def check_Even_Parity(x):\n    parity = 0\n    while x != 0:\n        x = x & (x - 1)\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 436.1729736328125}
{"task_id": 857, "code": "def listify_list(list1):\n    result = list(map(list, list1))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 394.0379638671875}
{"task_id": 856, "code": "def find_Min_Swaps(arr, n):\n    noOfZeroes = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 - arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        noOfZeroes[i] = noOfZeroes[i + 1]\n        if arr[i] == 0:\n            noOfZeroes[i] = noOfZeroes[i] + 1\n    for i in range(0, n):\n        if arr[i] == 1:\n            count = count + noOfZeroes[i]\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 476.9739990234375}
{"task_id": 858, "code": "def count_list(input_list):\n    return (len(input_list)) ** 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 351.41302490234375}
{"task_id": 859, "code": "from itertools import combinations\n\n\ndef sub_lists(my_list):\n    subs = []\n    for i in range(0, len(my_list) + 1):\n        temp = [list(x) for x in combinations(my_list, i)]\n        if len(temp) > 0:\n            subs.extend(temp)\n    return subs\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 366.36614990234375}
{"task_id": 860, "code": "import re\n\nregex = \"[a-zA-z0-9]$\"\n\n\ndef check_alphanumeric(string):\n    if re.search(regex, string):\n        return \"Accept\"\n    else:\n        return \"Discard\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.96002197265625}
{"task_id": 861, "code": "from collections import Counter\n\n\ndef anagram_lambda(texts, str):\n    result = list(filter(lambda x: (Counter(str) == Counter(x)), texts))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 418.8330078125}
{"task_id": 862, "code": "import re\nfrom collections import Counter\n\n\ndef n_common_words(text, n):\n    words = re.findall(\"\\w+\", text)\n    n_common_words = Counter(words).most_common(n)\n    return list(n_common_words)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 456.0301208496094}
{"task_id": 863, "code": "def find_longest_conseq_subseq(arr, n):\n    ans = 0\n    count = 0\n    arr.sort()\n    v = []\n    v.append(arr[0])\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            v.append(arr[i])\n    for i in range(len(v)):\n        if i > 0 and v[i] == v[i - 1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 442.8660888671875}
{"task_id": 866, "code": "def check_monthnumb(monthname2):\n    if (\n        monthname2 == \"January\"\n        or monthname2 == \"March\"\n        or monthname2 == \"May\"\n        or monthname2 == \"July\"\n        or monthname2 == \"Augest\"\n        or monthname2 == \"October\"\n        or monthname2 == \"December\"\n    ):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 453.3538818359375}
{"task_id": 865, "code": "def ntimes_list(nums, n):\n    result = map(lambda x: n * x, nums)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 511.4808044433594}
{"task_id": 864, "code": "def palindrome_lambda(texts):\n    result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.0401611328125}
{"task_id": 867, "code": "def min_Num(arr, n):\n    odd = 0\n    for i in range(n):\n        if arr[i] % 2:\n            odd += 1\n    if odd % 2:\n        return 1\n    return 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 472.20086669921875}
{"task_id": 868, "code": "def length_Of_Last_Word(a):\n    l = 0\n    x = a.strip()\n    for i in range(len(x)):\n        if x[i] == \" \":\n            l = 0\n        else:\n            l += 1\n    return l\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 634.5269775390625}
{"task_id": 869, "code": "def remove_list_range(list1, leftrange, rigthrange):\n    result = [i for i in list1 if (min(i) >= leftrange and max(i) <= rigthrange)]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 617.7852172851562}
{"task_id": 870, "code": "def sum_positivenum(nums):\n    sum_positivenum = list(filter(lambda nums: nums > 0, nums))\n    return sum(sum_positivenum)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 574.0420532226562}
{"task_id": 871, "code": "def are_Rotations(string1, string2):\n    size1 = len(string1)\n    size2 = len(string2)\n    temp = \"\"\n    if size1 != size2:\n        return False\n    temp = string1 + string1\n    if temp.count(string2) > 0:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 604.10595703125}
{"task_id": 872, "code": "def check_subset(list1, list2):\n    return all(map(list1.__contains__, list2))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 562.7701416015625}
{"task_id": 873, "code": "def fibonacci(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + (fibonacci(n - 2))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.9811401367188}
{"task_id": 874, "code": "def check_Concat(str1, str2):\n    N = len(str1)\n    M = len(str2)\n    if N % M != 0:\n        return False\n    for i in range(N):\n        if str1[i] != str2[i % M]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 620.4478759765625}
{"task_id": 875, "code": "def min_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = min(temp)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 625.43701171875}
{"task_id": 877, "code": "def sort_String(str):\n    str = \"\".join(sorted(str))\n    return str\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 612.7960815429688}
{"task_id": 876, "code": "def lcm(x, y):\n    if x > y:\n        z = x\n    else:\n        z = y\n    while True:\n        if (z % x == 0) and (z % y == 0):\n            lcm = z\n            break\n        z += 1\n    return lcm\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 614.7119750976562}
{"task_id": 878, "code": "def check_tuples(test_tuple, K):\n    res = all(ele in K for ele in test_tuple)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 623.0299682617188}
{"task_id": 879, "code": "import re\n\n\ndef text_match(text):\n    patterns = \"a.*?b$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.1872863769531}
{"task_id": 880, "code": "def Check_Solution(a, b, c):\n    if ((b * b) - (4 * a * c)) > 0:\n        return \"2 solutions\"\n    elif ((b * b) - (4 * a * c)) == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 525.6331176757812}
{"task_id": 881, "code": "def sum_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even + first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 535.9847412109375}
{"task_id": 882, "code": "def parallelogram_perimeter(b, h):\n    perimeter = 2 * (b * h)\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.4148559570312}
{"task_id": 883, "code": "def div_of_nums(nums, m, n):\n    result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 565.5381469726562}
{"task_id": 885, "code": "def is_Isomorphic(str1, str2):\n    dict_str1 = {}\n    dict_str2 = {}\n    for i, value in enumerate(str1):\n        dict_str1[value] = dict_str1.get(value, []) + [i]\n    for j, value in enumerate(str2):\n        dict_str2[value] = dict_str2.get(value, []) + [j]\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 550.2000122070312}
{"task_id": 886, "code": "def sum_num(numbers):\n    total = 0\n    for x in numbers:\n        total += x\n    return total / len(numbers)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 550.93310546875}
{"task_id": 884, "code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if num == new_num:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 566.5149536132812}
{"task_id": 887, "code": "def is_odd(n):\n    if n ^ 1 == n - 1:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 521.4080810546875}
{"task_id": 888, "code": "def substract_elements(test_tup1, test_tup2):\n    res = tuple(\n        tuple(a - b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 514.2369384765625}
{"task_id": 889, "code": "def reverse_list_lists(lists):\n    for l in lists:\n        l.sort(reverse=True)\n    return lists\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 508.36419677734375}
{"task_id": 890, "code": "def find_Extra(arr1, arr2, n):\n    for i in range(0, n):\n        if arr1[i] != arr2[i]:\n            return i\n    return n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 536.4871215820312}
{"task_id": 891, "code": "def same_Length(A, B):\n    while A > 0 and B > 0:\n        A = A / 10\n        B = B / 10\n    if A == 0 and B == 0:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 523.7669677734375}
{"task_id": 893, "code": "def Extract(lst):\n    return [item[-1] for item in lst]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 563.1351318359375}
{"task_id": 892, "code": "import re\n\n\ndef remove_spaces(text):\n    return re.sub(\" +\", \" \", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 590.1141357421875}
{"task_id": 894, "code": "def float_to_tuple(test_str):\n    res = tuple(map(float, test_str.split(\", \")))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 591.0379638671875}
{"task_id": 895, "code": "def max_sum_subseq(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    look_up = [None] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n        look_up[i] = max(look_up[i], A[i])\n    return look_up[n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.1207275390625}
{"task_id": 896, "code": "def last(n):\n    return n[-1]\n\n\ndef sort_list_last(tuples):\n    return sorted(tuples, key=last)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 550.3818969726562}
{"task_id": 897, "code": "def is_Word_Present(sentence, word):\n    s = sentence.split(\" \")\n    for i in s:\n        if i == word:\n            return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 546.7567138671875}
{"task_id": 898, "code": "from itertools import groupby\n\n\ndef extract_elements(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 572.4718627929688}
{"task_id": 899, "code": "def check(arr, n):\n    g = 0\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] > 0 and g == 1:\n            return False\n        if arr[i] - arr[i] < 0:\n            g = 1\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.6631469726562}
{"task_id": 902, "code": "from collections import Counter\n\n\ndef add_dict(d1, d2):\n    add_dict = Counter(d1) + Counter(d2)\n    return add_dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 532.6819458007812}
{"task_id": 900, "code": "import re\n\n\ndef match_num(string):\n    text = re.compile(r\"^5\")\n    if text.match(string):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 605.4923706054688}
{"task_id": 904, "code": "def even_num(x):\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 541.3499145507812}
{"task_id": 903, "code": "def count_Unset_Bits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if temp % 2 == 0:\n                cnt += 1\n            temp = temp // 2\n    return cnt\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 564.0218505859375}
{"task_id": 901, "code": "def smallest_multiple(n):\n    if n <= 2:\n        return n\n    i = n * 2\n    factors = [number for number in range(n, 1, -1) if number * 2 > n]\n    while True:\n        for a in factors:\n            if i % a != 0:\n                i += n\n                break\n            if a == factors[-1] and i % a == 0:\n                return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 583.8720703125}
{"task_id": 905, "code": "def factorial(start, end):\n    res = 1\n    for i in range(start, end + 1):\n        res *= i\n    return res\n\n\ndef sum_of_square(n):\n    return int(factorial(n + 1, 2 * n) / factorial(1, n))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.219970703125}
{"task_id": 906, "code": "import re\n\n\ndef extract_date(url):\n    return re.findall(r\"/(\\d{4})/(\\d{1,2})/(\\d{1,2})/\", url)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.9548950195312}
{"task_id": 907, "code": "def lucky_num(n):\n    List = range(-1, n * n + 9, 2)\n    i = 2\n    while List[i:]:\n        List = sorted(set(List) - set(List[List[i] :: List[i]]))\n        i += 1\n    return List[1 : n + 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 590.0828857421875}
{"task_id": 908, "code": "def find_fixed_point(arr, n):\n    for i in range(n):\n        if arr[i] is i:\n            return i\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.7579345703125}
{"task_id": 910, "code": "import datetime\n\n\ndef check_date(m, d, y):\n    try:\n        m, d, y = map(int, (m, d, y))\n        datetime.date(y, m, d)\n        return True\n    except ValueError:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 581.3779907226562}
{"task_id": 909, "code": "def previous_palindrome(num):\n    for x in range(num - 1, 0, -1):\n        if str(x) == str(x)[::-1]:\n            return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 615.2059936523438}
{"task_id": 911, "code": "import heapq\n\n\ndef maximum_product(nums):\n    import heapq\n\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.1979370117188}
{"task_id": 913, "code": "import re\n\n\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 606.883056640625}
{"task_id": 912, "code": "def binomial_coeff(n, k):\n    C = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    for i in range(0, n + 1):\n        for j in range(0, min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n    return C[n][k]\n\n\ndef lobb_num(n, m):\n    return ((2 * m + 1) * binomial_coeff(2 * n, m + n)) / (m + n + 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 562.6361083984375}
{"task_id": 914, "code": "def is_Two_Alter(s):\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 2]:\n            return False\n    if s[0] == s[1]:\n        return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 589.590087890625}
{"task_id": 915, "code": "def rearrange_numbs(array_nums):\n    result = sorted(array_nums, key=lambda i: 0 if i == 0 else -1 / i)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 571.7828369140625}
{"task_id": 916, "code": "def find_triplet_array(A, arr_size, sum):\n    for i in range(0, arr_size - 2):\n        for j in range(i + 1, arr_size - 1):\n            for k in range(j + 1, arr_size):\n                if A[i] + A[j] + A[k] == sum:\n                    return A[i], A[j], A[k]\n                    return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 497.23602294921875}
{"task_id": 917, "code": "import re\n\n\ndef text_uppercase_lowercase(text):\n    patterns = \"[A-Z]+[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 517.1658935546875}
{"task_id": 918, "code": "def coin_change(S, m, n):\n    table = [[0 for x in range(m)] for x in range(n + 1)]\n    for i in range(m):\n        table[0][i] = 1\n    for i in range(1, n + 1):\n        for j in range(m):\n            x = table[i - S[j]][j] if i - S[j] >= 0 else 0\n            y = table[i][j - 1] if j >= 1 else 0\n            table[i][j] = x + y\n    return table[n][m - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 535.1538696289062}
{"task_id": 920, "code": "def remove_tuple(test_list):\n    res = [sub for sub in test_list if not all(ele == None for ele in sub)]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 513.0598754882812}
{"task_id": 919, "code": "def multiply_list(items):\n    tot = 1\n    for x in items:\n        tot *= x\n    return tot\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 543.44775390625}
{"task_id": 921, "code": "def chunk_tuples(test_tup, N):\n    res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 511.6720275878906}
{"task_id": 922, "code": "def max_product(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return None\n    x = arr[0]\n    y = arr[1]\n    for i in range(0, arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] * arr[j] > x * y:\n                x = arr[i]\n                y = arr[j]\n    return x, y\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.6722412109375}
{"task_id": 923, "code": "def super_seq(X, Y, m, n):\n    if not m:\n        return n\n    if not n:\n        return m\n    if X[m - 1] == Y[n - 1]:\n        return 1 + super_seq(X, Y, m - 1, n - 1)\n    return 1 + min(super_seq(X, Y, m - 1, n), super_seq(X, Y, m, n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 546.9489135742188}
{"task_id": 924, "code": "def max_of_two(x, y):\n    if x > y:\n        return x\n    return y\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 552.1519165039062}
{"task_id": 925, "code": "def mutiple_tuple(nums):\n    temp = list(nums)\n    product = 1\n    for x in temp:\n        product *= x\n    return product\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 579.9269409179688}
{"task_id": 929, "code": "def count_tuplex(tuplex, value):\n    count = tuplex.count(value)\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 536.9110107421875}
{"task_id": 927, "code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef max_height(node):\n    if node is None:\n        return 0\n    else:\n        left_height = max_height(node.left)\n        right_height = max_height(node.right)\n        if left_height > right_height:\n            return left_height + 1\n        else:\n            return right_height + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "errors": ["name 'root' is not defined"]}, {"caseId": "case_1", "errors": ["name 'root1' is not defined"]}, {"caseId": "case_2", "errors": ["name 'root2' is not defined"]}], "exec_time_ms": 553.4970703125}
{"task_id": 926, "code": "def binomial_coeffi(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeffi(n - 1, k - 1) + binomial_coeffi(n - 1, k)\n\n\ndef rencontres_number(n, m):\n    if n == 0 and m == 0:\n        return 1\n    if n == 1 and m == 0:\n        return 0\n    if m == 0:\n        return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))\n    return binomial_coeffi(n, m) * rencontres_number(n - m, 0)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 562.63232421875}
{"task_id": 930, "code": "import re\n\n\ndef text_match(text):\n    patterns = \"ab*?\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 562.8211669921875}
{"task_id": 928, "code": "import re\n\n\ndef change_date_format(dt):\n    return re.sub(r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\", \"\\\\3-\\\\2-\\\\1\", dt)\n    return change_date_format(dt)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 638.510009765625}
{"task_id": 931, "code": "import math\n\n\ndef sum_series(number):\n    total = 0\n    total = math.pow((number * (number + 1)) / 2, 2)\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 600.7158813476562}
{"task_id": 932, "code": "def remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 640.0580444335938}
{"task_id": 933, "code": "import re\n\n\ndef camel_to_snake(text):\n    str1 = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", str1).lower()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 553.5638427734375}
{"task_id": 934, "code": "def dealnnoy_num(n, m):\n    if m == 0 or n == 0:\n        return 1\n    return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 538.9480590820312}
{"task_id": 936, "code": "def re_arrange_tuples(test_list, ord_list):\n    temp = dict(test_list)\n    res = [(key, temp[key]) for key in ord_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 625.5021362304688}
{"task_id": 935, "code": "def series_sum(number):\n    total = 0\n    total = (number * (number + 1) * (2 * number + 1)) / 6\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 632.1900024414062}
{"task_id": 937, "code": "from collections import Counter\n\n\ndef max_char(str1):\n    temp = Counter(str1)\n    max_char = max(temp, key=temp.get)\n    return max_char\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 606.7776489257812}
{"task_id": 938, "code": "import sys\n\n\ndef find_closet(A, B, C, p, q, r):\n    diff = sys.maxsize\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < p and j < q and k < r:\n        minimum = min(A[i], min(B[j], C[k]))\n        maximum = max(A[i], max(B[j], C[k]))\n        if maximum - minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum\n        if diff == 0:\n            break\n        if A[i] == minimum:\n            i = i + 1\n        elif B[j] == minimum:\n            j = j + 1\n        else:\n            k = k + 1\n    return A[res_i], B[res_j], C[res_k]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 568.1610107421875}
{"task_id": 939, "code": "def sorted_models(models):\n    sorted_models = sorted(models, key=lambda x: x[\"color\"])\n    return sorted_models\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 623.0750122070312}
{"task_id": 940, "code": "def heap_sort(arr):\n    heapify(arr)\n    end = len(arr) - 1\n    while end > 0:\n        arr[end], arr[0] = arr[0], arr[end]\n        shift_down(arr, 0, end - 1)\n        end -= 1\n    return arr\n\n\ndef heapify(arr):\n    start = len(arr) // 2\n    while start >= 0:\n        shift_down(arr, start, len(arr) - 1)\n        start -= 1\n\n\ndef shift_down(arr, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        if child + 1 <= end and arr[child] < arr[child + 1]:\n            child += 1\n        if child <= end and arr[root] < arr[child]:\n            arr[root], arr[child] = arr[child], arr[root]\n            root = child\n        else:\n            return\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 595.1580810546875}
{"task_id": 941, "code": "def count_elim(num):\n    count_elim = 0\n    for n in num:\n        if isinstance(n, tuple):\n            break\n        count_elim += 1\n    return count_elim\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 520.8709106445312}
{"task_id": 942, "code": "def check_element(test_tup, check_list):\n    res = False\n    for ele in check_list:\n        if ele in test_tup:\n            res = True\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 499.2792663574219}
{"task_id": 943, "code": "from heapq import merge\n\n\ndef combine_lists(num1, num2):\n    combine_lists = list(merge(num1, num2))\n    return combine_lists\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 497.4310302734375}
{"task_id": 946, "code": "from collections import Counter\n\n\ndef most_common_elem(s, a):\n    most_common_elem = Counter(s).most_common(a)\n    return most_common_elem\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.6478271484375}
{"task_id": 944, "code": "import re\n\n\ndef num_position(text):\n    for m in re.finditer(\"\\d+\", text):\n        return m.start()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 547.4638671875}
{"task_id": 945, "code": "def tuple_to_set(t):\n    s = set(t)\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 574.1760864257812}
{"task_id": 947, "code": "def len_log(list1):\n    min = len(list1[0])\n    for i in list1:\n        if len(i) < min:\n            min = len(i)\n    return min\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 516.6232299804688}
{"task_id": 949, "code": "def count_digs(tup):\n    return sum([len(str(ele)) for ele in tup])\n\n\ndef sort_list(test_list):\n    test_list.sort(key=count_digs)\n    return str(test_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 529.468994140625}
{"task_id": 950, "code": "def chinese_zodiac(year):\n    if (year - 2000) % 12 == 0:\n        sign = \"Dragon\"\n    elif (year - 2000) % 12 == 1:\n        sign = \"Snake\"\n    elif (year - 2000) % 12 == 2:\n        sign = \"Horse\"\n    elif (year - 2000) % 12 == 3:\n        sign = \"sheep\"\n    elif (year - 2000) % 12 == 4:\n        sign = \"Monkey\"\n    elif (year - 2000) % 12 == 5:\n        sign = \"Rooster\"\n    elif (year - 2000) % 12 == 6:\n        sign = \"Dog\"\n    elif (year - 2000) % 12 == 7:\n        sign = \"Pig\"\n    elif (year - 2000) % 12 == 8:\n        sign = \"Rat\"\n    elif (year - 2000) % 12 == 9:\n        sign = \"Ox\"\n    elif (year - 2000) % 12 == 10:\n        sign = \"Tiger\"\n    else:\n        sign = \"Hare\"\n    return sign\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.548095703125}
{"task_id": 948, "code": "def get_item(tup1, index):\n    item = tup1[index]\n    return item\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 610.1820678710938}
{"task_id": 951, "code": "def max_similar_indices(test_list1, test_list2):\n    res = [(max(x[0], y[0]), max(x[1], y[1])) for x, y in zip(test_list1, test_list2)]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.166015625}
{"task_id": 952, "code": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    C = [0 for i in range(r + 1)]\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j - 1]) % p\n    return C[r]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 526.3750610351562}
{"task_id": 953, "code": "def subset(ar, n):\n    res = 0\n    ar.sort()\n    for i in range(0, n):\n        count = 1\n        for i in range(n - 1):\n            if ar[i] == ar[i + 1]:\n                count += 1\n            else:\n                break\n        res = max(res, count)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 555.866943359375}
{"task_id": 954, "code": "def profit_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        amount = actual_cost - sale_amount\n        return amount\n    else:\n        return None\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 571.9470825195312}
{"task_id": 955, "code": "def is_abundant(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum > n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 525.634033203125}
{"task_id": 957, "code": "import math\n\n\ndef get_First_Set_Bit_Pos(n):\n    return math.log2(n & -n) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 512.6919555664062}
{"task_id": 958, "code": "def int_to_roman(num):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = \"\"\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 514.8043823242188}
{"task_id": 956, "code": "import re\n\n\ndef split_list(text):\n    return re.findall(\"[A-Z][^A-Z]*\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 603.5647583007812}
{"task_id": 959, "code": "def Average(lst):\n    return sum(lst) / len(lst)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 575.3390502929688}
{"task_id": 960, "code": "def get_noOfways(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_noOfways(n - 1) + get_noOfways(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 531.3536987304688}
{"task_id": 961, "code": "def roman_to_int(s):\n    rom_val = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000}\n    int_val = 0\n    for i in range(len(s)):\n        if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n            int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n        else:\n            int_val += rom_val[s[i]]\n    return int_val\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 580.5413818359375}
{"task_id": 963, "code": "def discriminant_value(x, y, z):\n    discriminant = (y**2) - (4 * x * z)\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"one solution\", discriminant)\n    elif discriminant < 0:\n        return (\"no real solution\", discriminant)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 566.8079833984375}
{"task_id": 962, "code": "def sum_Natural(n):\n    sum = n * (n + 1)\n    return int(sum)\n\n\ndef sum_Even(l, r):\n    return sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 580.0459594726562}
{"task_id": 965, "code": "import re\n\n\ndef camel_to_snake(text):\n    import re\n\n    str1 = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", str1).lower()\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 536.1361694335938}
{"task_id": 964, "code": "def word_len(s):\n    s = s.split(\" \")\n    for word in s:\n        if len(word) % 2 == 0:\n            return True\n        else:\n            return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 565.9461059570312}
{"task_id": 966, "code": "def remove_empty(tuple1):  # L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n    tuple1 = [t for t in tuple1 if t]\n    return tuple1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 608.9411010742188}
{"task_id": 968, "code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 509.155029296875}
{"task_id": 967, "code": "def check(string):\n    if len(set(string).intersection(\"AEIOUaeiou\")) >= 5:\n        return \"accepted\"\n    else:\n        return \"not accepted\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 533.427978515625}
{"task_id": 969, "code": "def join_tuples(test_list):\n    res = []\n    for sub in test_list:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    res = list(map(tuple, res))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 560.0459594726562}
{"task_id": 970, "code": "def min_of_two(x, y):\n    if x < y:\n        return x\n    return y\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 548.197021484375}
{"task_id": 971, "code": "def maximum_segments(n, a, b, c):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(0, n):\n        if dp[i] != -1:\n            if i + a <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 551.0372924804688}
{"task_id": 973, "code": "def left_rotate(s, d):\n    tmp = s[d:] + s[0:d]\n    return tmp\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 491.9011535644531}
{"task_id": 972, "code": "def concatenate_nested(test_tup1, test_tup2):\n    res = test_tup1 + test_tup2\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 519.2177124023438}
{"task_id": 974, "code": "def min_sum_path(A):\n    memo = [None] * len(A)\n    n = len(A) - 1\n    for i in range(len(A[n])):\n        memo[i] = A[n][i]\n    for i in range(len(A) - 2, -1, -1):\n        for j in range(len(A[i])):\n            memo[j] = A[i][j] + min(memo[j], memo[j + 1])\n    return memo[0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 528.7139282226562}
