{"code": "R = 3\nC = 3\n\n\ndef min_cost(cost, m, n):\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m + 1):\n        tc[i][0] = tc[i - 1][0] + cost[i][0]\n    for j in range(1, n + 1):\n        tc[0][j] = tc[0][j - 1] + cost[0][j]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            tc[i][j] = min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j]\n    return tc[m][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1160.7115478515625}
{"code": "def similar_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) & set(test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1311.666015625}
{"code": "def is_Power_Of_Two(x):\n    return x and (not (x & (x - 1)))\n\n\ndef differ_At_One_Bit_Pos(a, b):\n    return is_Power_Of_Two(a ^ b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1385.9727783203125}
{"code": "def square_nums(nums):\n    square_nums = list(map(lambda x: x**2, nums))\n    return square_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1410.4578857421875}
{"code": "def count_ways(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1376.1446533203125}
{"code": "import heapq as hq\n\n\ndef heap_queue_largest(nums, n):\n    largest_nums = hq.nlargest(n, nums)\n    return largest_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1444.04931640625}
{"code": "import math\n\n\ndef is_not_prime(n):\n    result = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            result = True\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1439.979736328125}
{"code": "import re\n\n\ndef find_char_long(text):\n    return re.findall(r\"\\b\\w{4,}\\b\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1599.3612060546875}
{"code": "def find_Rotations(str):\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i : i + n]\n        if str == substring:\n            return i\n    return n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1335.1070556640625}
{"code": "import heapq\n\n\ndef small_nnum(list1, n):\n    smallest = heapq.nsmallest(n, list1)\n    return smallest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1248.4986572265625}
{"code": "def remove_Occ(s, ch):\n    for i in range(len(s)):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == ch:\n            s = s[0:i] + s[i + 1 :]\n            break\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1268.9234619140625}
{"code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1281.1138916015625}
{"code": "def find_Volume(l, b, h):\n    return (l * b * h) / 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1331.29736328125}
{"code": "from collections import Counter\n\n\ndef count_common(words):\n    word_counts = Counter(words)\n    top_four = word_counts.most_common(4)\n    return top_four\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1435.05029296875}
{"code": "import re\n\n\ndef split_lowerstring(text):\n    return re.findall(\"[a-z][^a-z]*\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1418.465087890625}
{"code": "import re\n\n\ndef text_lowercase_underscore(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1514.709716796875}
{"code": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1294.716796875}
{"code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)\n    return len(arraynums) != len(nums_set)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1264.12158203125}
{"code": "NO_OF_CHARS = 256\n\n\ndef str_to_list(string):\n    temp = []\n    for x in string:\n        temp.append(x)\n    return temp\n\n\ndef lst_to_string(List):\n    return \"\".join(List)\n\n\ndef get_char_count_array(string):\n    count = [0] * NO_OF_CHARS\n    for i in string:\n        count[ord(i)] += 1\n    return count\n\n\ndef remove_dirty_chars(string, second_string):\n    count = get_char_count_array(second_string)\n    ip_ind = 0\n    res_ind = 0\n    temp = \"\"\n    str_list = str_to_list(string)\n    while ip_ind != len(str_list):\n        temp = str_list[ip_ind]\n        if count[ord(temp)] == 0:\n            str_list[res_ind] = str_list[ip_ind]\n            res_ind += 1\n        ip_ind += 1\n    return lst_to_string(str_list[0:res_ind])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1414.8221435546875}
{"code": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    if x == 1:\n        return True\n    x = x + 1\n    p = 0\n    while x % 2 == 0:\n        x = x / 2\n        p = p + 1\n        if p == x:\n            return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1390.5849609375}
{"code": "def multiples_of_num(m, n):\n    multiples_of_num = list(range(n, (m + 1) * n, n))\n    return list(multiples_of_num)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1385.184814453125}
{"code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n    return no_duplicate\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1353.141845703125}
{"code": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1:\n        sum = 0\n        for y in x:\n            sum += y\n        maxi = max(sum, maxi)\n    return maxi\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1430.288818359375}
{"code": "def binary_to_decimal(binary):\n    binary1 = binary\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1373.35107421875}
{"code": "def check_k_elements(test_list, K):\n    res = True\n    for tup in test_list:\n        for ele in tup:\n            if ele != K:\n                res = False\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1302.439453125}
{"code": "def find_Product(arr, n):\n    arr.sort()\n    prod = 1\n    for i in range(0, n, 1):\n        if arr[i - 1] != arr[i]:\n            prod = prod * arr[i]\n    return prod\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1442.940673828125}
{"code": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1254.2569580078125}
{"code": "def get_Odd_Occurrence(arr, arr_size):\n    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1323.9586181640625}
{"code": "def check_Equality(s):\n    return ord(s[0]) == ord(s[len(s) - 1])\n\n\ndef count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n - i + 1):\n            if check_Equality(s[i : i + j]):\n                result += 1\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1241.322998046875}
{"code": "import re\n\n\ndef remove(list):\n    pattern = \"[0-9]\"\n    list = [re.sub(pattern, \"\", i) for i in list]\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1600.5999755859375}
{"code": "import collections\nimport heapq\n\n\ndef func(nums, k):\n    import collections\n\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1390.6497802734375}
{"code": "import math\n\n\ndef max_Prime_Factors(n):\n    maxPrime = -1\n    while n % 2 == 0:\n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            maxPrime = i\n            n = n / i\n    if n > 2:\n        maxPrime = n\n    return int(maxPrime)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1269.2698974609375}
{"code": "def decimal_To_Binary(N):\n    B_Number = 0\n    cnt = 0\n    while N != 0:\n        rem = N % 2\n        c = pow(10, cnt)\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1229.606689453125}
{"code": "def find_missing(ar, N):\n    l = 0\n    r = N - 1\n    while l <= r:\n        mid = (l + r) / 2\n        mid = int(mid)\n        if ar[mid] != mid + 1 and ar[mid - 1] == mid:\n            return mid + 1\n        elif ar[mid] != mid + 1:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1461.3109130859375}
{"code": "def find_rect_num(n):\n    return n * (n + 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1423.259765625}
{"code": "def find_Nth_Digit(p, q, N):\n    while N > 0:\n        N -= 1\n        p *= 10\n        res = p // q\n        p %= q\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1310.1396484375}
{"code": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1643.3468017578125}
{"code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    return first_even / first_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1736.1209716796875}
{"code": "import heapq\nfrom collections import Counter\n\n\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1:\n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1:\n            heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1:\n            heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1710.813720703125}
{"code": "from collections import Counter\nfrom itertools import chain\n\n\ndef freq_element(nums):\n    result = Counter(chain.from_iterable(nums))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1791.1131591796875}
{"code": "def filter_evennumbers(nums):\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1718.66796875}
{"code": "def find_Sum(arr, n):\n    return sum([x for x in arr if arr.count(x) > 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1632.172607421875}
{"code": "def find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef get_gcd(l):\n    num1 = l[0]\n    num2 = l[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1523.4300537109375}
{"code": "import re\n\n\ndef text_match_string(text):\n    patterns = \"^\\w+\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1928.5726318359375}
{"code": "def test_distinct(data):\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1464.1248779296875}
{"code": "import re\n\n\ndef text_match(text):\n    patterns = \"^[a-z]+_[a-z]+$\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2069.003173828125}
{"code": "def compute_Last_Digit(A, B):\n    variable = 1\n    if A == B:\n        return 1\n    elif (B - A) >= 5:\n        return 0\n    else:\n        for i in range(A + 1, B + 1):\n            variable = (variable * (i % 10)) % 10\n        return variable % 10\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1415.1556396484375}
{"code": "def odd_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1573.728759765625}
{"code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1524.2359619140625}
{"code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1700.3638916015625}
{"code": "def check_equilateral(x, y, z):\n    if x == y == z:\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1522.1597900390625}
{"code": "def parallelogram_area(b, h):\n    area = b * h\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1482.0623779296875}
{"code": "def check_Equality(str):\n    if str[0] == str[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1533.8162841796875}
{"code": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n        for a in range(buckets[j]):\n            my_list[i] = j\n            i += 1\n    return my_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1761.5181884765625}
{"code": "import math\n\n\ndef tn_gp(a, n, r):\n    tn = a * (math.pow(r, n - 1))\n    return tn\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1741.689453125}
{"code": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n\n\ndef check(n):\n    return 2 * rev(n) == n + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1560.4112548828125}
{"code": "def find_Max_Num(arr, n):\n    arr.sort(reverse=True)\n    num = arr[0]\n    for i in range(1, n):\n        num = num * 10 + arr[i]\n    return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1476.6602783203125}
{"code": "def opposite_Signs(x, y):\n    return (x ^ y) < 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1419.6805419921875}
{"code": "def is_octagonal(n):\n    return 3 * n * n - 2 * n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1419.3763427734375}
{"code": "def max_len_sub(arr, n):\n    mls = []\n    max = 0\n    for i in range(n):\n        mls.append(1)\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1:\n                mls[i] = mls[j] + 1\n    for i in range(n):\n        if max < mls[i]:\n            max = mls[i]\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1448.558837890625}
{"code": "from collections import defaultdict\n\n\ndef count_Substrings(s, n):\n    count, sum = 0, 0\n    mp = defaultdict(lambda: 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord(\"0\")\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1501.070068359375}
{"code": "def smallest_num(xs):\n    return min(xs)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1385.5450439453125}
{"code": "def max_difference(test_list):\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1404.1309814453125}
{"code": "def subject_marks(subjectmarks):\n    # subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1562.003173828125}
{"code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1823.689453125}
{"code": "def pos_count(list):\n    pos_count = 0\n    for num in list:\n        if num >= 0:\n            pos_count += 1\n    return pos_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1838.9351806640625}
{"code": "def bell_number(n):\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1778.697021484375}
{"code": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i + n] == s[n]):\n                    n += 1\n                if n == len(s):\n                    sub_set = True\n    return sub_set\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1732.9111328125}
{"code": "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(\n        A[i] >= A[i + 1] for i in range(len(A) - 1)\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2022.39013671875}
{"code": "def find_equal_tuple(Input, k):\n    flag = 1\n    for tuple in Input:\n        if len(tuple) != k:\n            flag = 0\n            break\n    return flag\n\n\ndef get_equal(Input, k):\n    if find_equal_tuple(Input, k) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1780.1763916015625}
{"code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i + gaps]:\n                nums[i], nums[i + gaps] = nums[i + gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1798.91796875}
{"code": "def dif_Square(n):\n    if n % 4 != 2:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1859.7156982421875}
{"code": "import re\n\n\ndef multiple_split(text):\n    return re.split(\"; |, |\\*|\\n\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1682.627685546875}
{"code": "def find_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1495.5618896484375}
{"code": "def count_Squares(m, n):\n    if n < m:\n        temp = m\n        m = n\n        n = temp\n    return m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1326.464599609375}
{"code": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    sdict = {}\n    pset = set()\n    sset = set()\n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n    if len(pset) != len(sset):\n        return False\n    for values in sdict.values():\n        for i in range(len(values) - 1):\n            if values[i] != values[i + 1]:\n                return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1554.331787109375}
{"code": "def is_Diff(n):\n    return n % 11 == 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1386.61474609375}
{"code": "def count_With_Odd_SetBits(n):\n    if n % 2 != 0:\n        return (n + 1) / 2\n    count = bin(n).count(\"1\")\n    ans = n / 2\n    if count % 2 != 0:\n        ans += 1\n    return ans\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1289.9854736328125}
{"code": "def word_len(s):\n    s = s.split(\" \")\n    for word in s:\n        if len(word) % 2 != 0:\n            return True\n        else:\n            return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1463.8699951171875}
{"code": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1445.610107421875}
{"code": "def zip_tuples(test_tup1, test_tup2):\n    res = []\n    for i, j in enumerate(test_tup1):\n        res.append((j, test_tup2[i % len(test_tup2)]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1426.94091796875}
{"code": "import math\n\n\ndef volume_sphere(r):\n    volume = (4 / 3) * math.pi * r * r * r\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1400.4859619140625}
{"code": "def get_Char(strr):\n    summ = 0\n    for i in range(len(strr)):\n        summ += ord(strr[i]) - ord(\"a\") + 1\n    if summ % 26 == 0:\n        return ord(\"z\")\n    else:\n        summ = summ % 26\n        return chr(ord(\"a\") + summ - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1470.7711181640625}
{"code": "import math\n\n\ndef surfacearea_sphere(r):\n    surfacearea = 4 * math.pi * r * r\n    return surfacearea\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1327.5098876953125}
{"code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1474.5863037109375}
{"code": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1444.826171875}
{"code": "import collections as ct\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2, dict3))\n    return merged_dict\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1440.116943359375}
{"code": "import collections\n\n\ndef freq_count(list1):\n    freq_count = collections.Counter(list1)\n    return freq_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1564.9588623046875}
{"code": "def closest_num(N):\n    return N - 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1392.5018310546875}
{"code": "def len_log(list1):\n    max = len(list1[0])\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1360.201171875}
{"code": "def is_undulating(n):\n    if len(n) <= 2:\n        return False\n    for i in range(2, len(n)):\n        if n[i - 2] != n[i]:\n            return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1407.7158203125}
{"code": "def find_substring(str1, sub_str):\n    if any(sub_str in s for s in str1):\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1541.791015625}
{"code": "def power(a, b):\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1514.1038818359375}
{"code": "from operator import itemgetter\n\n\ndef index_minimum(test_list):\n    res = min(test_list, key=itemgetter(1))[0]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1410.666259765625}
{"code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst)\n    return minLength\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1482.4971923828125}
{"code": "def divisor(n):\n    for i in range(n):\n        x = len([i for i in range(1, n + 1) if not n % i])\n    return x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1414.89599609375}
{"code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1480.4837646484375}
{"code": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1520.7774658203125}
{"code": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1435.7069091796875}
{"code": "def kth_element(arr, n, k):\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] == arr[j + 1], arr[j]\n    return arr[k - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1445.0726318359375}
{"code": "import sys\n\n\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num + 1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1536.659912109375}
{"code": "import re\n\n\ndef snake_to_camel(word):\n    import re\n\n    return \"\".join(x.capitalize() or \"_\" for x in word.split(\"_\"))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1713.3974609375}
{"code": "def eulerian_num(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1418.2611083984375}
{"code": "def sort_sublists(input_list):\n    result = [sorted(x, key=lambda x: x[0]) for x in input_list]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1358.0897216796875}
{"code": "def count(lst):\n    return sum(lst)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1409.1224365234375}
{"code": "def add_lists(test_list, test_tup):\n    res = tuple(list(test_tup) + test_list)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1421.6658935546875}
{"code": "def count_Hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i >= 10 and i <= 15:\n            count += 1\n        elif i > 15:\n            k = i\n            while k != 0:\n                if k % 16 >= 10:\n                    count += 1\n                k = k // 16\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1511.3358154296875}
{"code": "import heapq\n\n\ndef merge_sorted_list(num1, num2, num3):\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    result = heapq.merge(num1, num2, num3)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1591.755126953125}
{"code": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(0, n):\n        if s[i] == \"1\":\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1542.4580078125}
{"code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1459.7802734375}
{"code": "def extract_missing(test_list, strt_val, stop_val):\n    res = []\n    for sub in test_list:\n        if sub[0] > strt_val:\n            res.append((strt_val, sub[0]))\n            strt_val = sub[1]\n        if strt_val < stop_val:\n            res.append((strt_val, stop_val))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1464.1468505859375}
{"code": "def perimeter(diameter, height):\n    return 2 * (diameter + height)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1377.4599609375}
{"code": "def check_integer(text):\n    text = text.strip()\n    if len(text) < 1:\n        return None\n    else:\n        if all(text[i] in \"0123456789\" for i in range(len(text))):\n            return True\n        elif (text[0] in \"+-\") and all(\n            text[i] in \"0123456789\" for i in range(1, len(text))\n        ):\n            return True\n        else:\n            return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1695.4083251953125}
{"code": "from collections import Counter\n\n\ndef assign_freq(test_list):\n    res = [(*key, val) for key, val in Counter(test_list).items()]\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1887.3853759765625}
{"code": "def empty_dit(list1):\n    empty_dit = all(not d for d in list1)\n    return empty_dit\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1711.0240478515625}
{"code": "def list_to_float(test_list):\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele.isalpha():\n                temp.append(ele)\n            else:\n                temp.append(float(ele))\n        res.append((temp[0], temp[1]))\n    return str(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1522.4581298828125}
{"code": "def tuple_to_int(nums):\n    result = int(\"\".join(map(str, nums)))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1695.6522216796875}
{"code": "def search(arr, n):\n    XOR = 0\n    for i in range(n):\n        XOR = XOR ^ arr[i]\n    return XOR\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1557.6343994140625}
{"code": "def string_to_list(string):\n    lst = list(string.split(\" \"))\n    return lst\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1615.5028076171875}
{"code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1])\n    return result_max\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1559.792236328125}
{"code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(\n        A, n - 1, sum, count\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1668.5068359375}
{"code": "MAX = 3000\n\n\ndef smartNumber(n):\n    primes = [0] * MAX\n    result = []\n    for i in range(2, MAX):\n        if primes[i] == 0:\n            primes[i] = 1\n            j = i * 2\n            while j < MAX:\n                primes[j] -= 1\n                if (primes[j] + 3) == 0:\n                    result.append(j)\n                j = j + i\n    result.sort()\n    return result[n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1491.5521240234375}
{"code": "import cmath\n\n\ndef angle_complex(a, b):\n    cn = complex(a, b)\n    angle = cmath.phase(a + b)\n    return angle\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1485.717041015625}
{"code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1222.76611328125}
{"code": "def sum(a, b):\n    sum = 0\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1416.107666015625}
{"code": "def find_length(string, n):\n    current_sum = 0\n    max_sum = 0\n    for i in range(n):\n        current_sum += 1 if string[i] == \"0\" else -1\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1484.47705078125}
{"code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1492.49169921875}
{"code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum(lines) for lines in my_matrix])\n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0, iSize):\n        result1 += my_matrix[i][i]\n    sum_list.append(result1)\n    result2 = 0\n    for i in range(iSize - 1, -1, -1):\n        result2 += my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list)) > 1:\n        return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1344.379638671875}
{"code": "def reverse_vowels(str1):\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n            result_string += vowels[-1]\n            vowels = vowels[:-1]\n        else:\n            result_string += char\n    return result_string\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1244.20068359375}
{"code": "def tup_string(tup1):\n    str = \"\".join(tup1)\n    return str\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1285.878173828125}
{"code": "from collections import defaultdict\n\n\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1516.74609375}
{"code": "def sum_negativenum(nums):\n    sum_negativenum = list(filter(lambda nums: nums < 0, nums))\n    return sum(sum_negativenum)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1372.509033203125}
{"code": "def check_last(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum = _sum + arr[i]\n    if p == 1:\n        if _sum % 2 == 0:\n            return \"ODD\"\n        else:\n            return \"EVEN\"\n    return \"EVEN\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1335.701416015625}
{"code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1273.9815673828125}
{"code": "def cal_electbill(units):\n    if units < 50:\n        amount = units * 2.60\n        surcharge = 25\n    elif units <= 100:\n        amount = 130 + ((units - 50) * 3.25)\n        surcharge = 35\n    elif units <= 200:\n        amount = 130 + 162.50 + ((units - 100) * 5.26)\n        surcharge = 45\n    else:\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n        surcharge = 75\n    total = amount + surcharge\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1358.8306884765625}
{"code": "def is_Sum_Of_Powers_Of_Two(n):\n    if n % 2 == 1:\n        return False\n    else:\n        return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1313.6572265625}
{"code": "def extract_singly(test_list):\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if not ele in temp:\n                temp.add(ele)\n                res.append(ele)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1247.9827880859375}
{"code": "def circle_circumference(r):\n    perimeter = 2 * 3.1415 * r\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1305.2642822265625}
{"code": "from array import array\n\n\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n            None\n    return round(n1 / n, 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1590.7042236328125}
{"code": "def count_samepair(list1, list2, list3):\n    result = sum(m == n == o for m, n, o in zip(list1, list2, list3))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1415.1739501953125}
{"code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi + 1 : len(nums)]\n        nums = nums[arr_len - 1 :: -1] + nums[arr_len : len(nums)]\n        arr_len -= 1\n    return nums\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1511.4193115234375}
{"code": "def find_lists(Input):\n    if isinstance(Input, list):\n        return 1\n    else:\n        return len(Input)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1521.486572265625}
{"code": "def sum_Pairs(arr, n):\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1471.99609375}
{"code": "def max_Abs_Diff(arr, n):\n    minEle = arr[0]\n    maxEle = arr[0]\n    for i in range(1, n):\n        minEle = min(minEle, arr[i])\n        maxEle = max(maxEle, arr[i])\n    return maxEle - minEle\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1468.24169921875}
{"code": "def ascii_value_string(str1):\n    for i in range(len(str1)):\n        return ord(str1[i])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1533.9498291015625}
{"code": "def max_path_sum(tri, m, n):\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1):\n            if tri[i + 1][j] > tri[i + 1][j + 1]:\n                tri[i][j] += tri[i + 1][j]\n            else:\n                tri[i][j] += tri[i + 1][j + 1]\n    return tri[0][0]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1491.7962646484375}
{"code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\n\ndef closest(x):\n    ans = 0\n    while ans * 10 + 9 <= x:\n        ans = ans * 10 + 9\n    return ans\n\n\ndef sum_digits_twoparts(N):\n    A = closest(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1429.7322998046875}
{"code": "def longest_subseq_with_diff_one(arr, n):\n    dp = [1 for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if (arr[i] == arr[j] + 1) or (arr[i] == arr[j] - 1):\n                dp[i] = max(dp[i], dp[j] + 1)\n    result = 1\n    for i in range(n):\n        if result < dp[i]:\n            result = dp[i]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1498.2783203125}
{"code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1"}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 6489.22900390625}
{"code": "def does_Contain_B(a, b, c):\n    if a == b:\n        return True\n    if (b - a) * c > 0 and (b - a) % c == 0:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1583.3487548828125}
{"code": "def merge(a, b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\n\n\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1668.5650634765625}
{"code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1573.5108642578125}
{"code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1840.3880615234375}
{"code": "def parabola_vertex(a, b, c):\n    vertex = ((-b / (2 * a)), (((4 * a * c) - (b * b)) / (4 * a)))\n    return vertex\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1667.531005859375}
{"code": "def even_bit_toggle_number(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count = count + 1\n        temp >>= 1\n    return n ^ res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1749.6268310546875}
{"code": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1660.5009765625}
{"code": "from itertools import groupby\n\n\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1728.119140625}
{"code": "def min_Ops(arr, n, k):\n    max1 = max(arr)\n    res = 0\n    for i in range(0, n):\n        if (max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += (max1 - arr[i]) / k\n    return int(res)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1449.13623046875}
{"code": "def solution(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (\"x = \", i, \", y = \", int((n - (i * a)) / b))\n            return 0\n        i = i + 1\n    return \"No solution\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1308.65576171875}
{"code": "def month_season(month, days):\n    if month in (\"January\", \"February\", \"March\"):\n        season = \"winter\"\n    elif month in (\"April\", \"May\", \"June\"):\n        season = \"spring\"\n    elif month in (\"July\", \"August\", \"September\"):\n        season = \"summer\"\n    else:\n        season = \"autumn\"\n    if (month == \"March\") and (days > 19):\n        season = \"spring\"\n    elif (month == \"June\") and (days > 20):\n        season = \"summer\"\n    elif (month == \"September\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"October\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"November\") and (days > 21):\n        season = \"autumn\"\n    elif (month == \"December\") and (days > 20):\n        season = \"winter\"\n    return season\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1438.9820556640625}
{"code": "def sum_series(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1436.2218017578125}
{"code": "from math import pi, tan\n\n\ndef area_polygon(s, l):\n    area = s * (l**2) / (4 * tan(pi / s))\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1335.8702392578125}
{"code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1611.6383056640625}
{"code": "import math\n\n\ndef divSum(n):\n    sum = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sum = sum + i + math.floor(n / i)\n        i += 1\n    return sum\n\n\ndef areEquivalent(num1, num2):\n    return divSum(num1) == divSum(num2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1378.7867431640625}
{"code": "def count_char_position(str1):\n    count_chars = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord(\"A\")) or (i == ord(str1[i]) - ord(\"a\")):\n            count_chars += 1\n    return count_chars\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1286.052734375}
{"code": "def next_Power_Of_2(n):\n    count = 0\n    if n and not (n & (n - 1)):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1394.6676025390625}
{"code": "def find_even_Pair(A, N):\n    evenPair = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                evenPair += 1\n    return evenPair\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1609.2799072265625}
{"code": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1362.426025390625}
{"code": "def get_pell(n):\n    if n <= 2:\n        return n\n    a = 1\n    b = 2\n    for i in range(3, n + 1):\n        c = 2 * b + a\n        a = b\n        b = c\n    return b\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1443.0869140625}
{"code": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    for i in range(m, n + 1, 1):\n        sum_range += list1[i]\n    return sum_range\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1421.0682373046875}
{"code": "import math\n\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1447.4549560546875}
{"code": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\" and s[i + 1] == \"t\" and s[i + 2] == \"d\":\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1625.0450439453125}
{"code": "import re\n\n\ndef remove_splchar(text):\n    pattern = re.compile(\"[\\W_]+\")\n    return pattern.sub(\"\", text)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1590.5609130859375}
{"code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1331.9249267578125}
{"code": "def answer(L, R):\n    if 2 * L <= R:\n        return (L, 2 * L)\n    else:\n        return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1384.4940185546875}
{"code": "def perimeter_triangle(a, b, c):\n    perimeter = a + b + c\n    return perimeter\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1551.7437744140625}
{"code": "def is_valid_parenthese(str1):\n    stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthese in str1:\n        if parenthese in pchar:\n            stack.append(parenthese)\n        elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n            return False\n    return len(stack) == 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1584.119140625}
{"code": "def is_num_keith(x):\n    terms = []\n    temp = x\n    n = 0\n    while temp > 0:\n        terms.append(temp % 10)\n        temp = int(temp / 10)\n        n += 1\n    terms.reverse()\n    next_term = 0\n    i = n\n    while next_term < x:\n        next_term = 0\n        for j in range(1, n + 1):\n            next_term += terms[i - j]\n        terms.append(next_term)\n        i += 1\n    return next_term == x\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1320.832763671875}
{"code": "import re\n\n\ndef string_literals(patterns, text):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return \"Matched!\"\n        else:\n            return \"Not Matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1666.2998046875}
{"code": "from math import acos, cos, radians, sin\n\n\ndef distance_lat_long(slat, slon, elat, elon):\n    dist = 6371.01 * acos(\n        sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon)\n    )\n    return dist\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1552.7958984375}
{"code": "def common_prefix_util(str1, str2):\n    result = \"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    i = 0\n    j = 0\n    while i <= n1 - 1 and j <= n2 - 1:\n        if str1[i] != str2[j]:\n            break\n        result += str1[i]\n        i += 1\n        j += 1\n    return result\n\n\ndef common_prefix(arr, n):\n    prefix = arr[0]\n    for i in range(1, n):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1345.9307861328125}
{"code": "import re\n\n\ndef find_character(string):\n    uppercase_characters = re.findall(r\"[A-Z]\", string)\n    lowercase_characters = re.findall(r\"[a-z]\", string)\n    numerical_characters = re.findall(r\"[0-9]\", string)\n    special_characters = re.findall(r\"[, .!?]\", string)\n    return (\n        uppercase_characters,\n        lowercase_characters,\n        numerical_characters,\n        special_characters,\n    )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1616.2481689453125}
{"code": "def count_pairs(arr, n, k):\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n                count += 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1356.6251220703125}
{"code": "def greater_specificnum(list, num):\n    greater_specificnum = all(x >= num for x in list)\n    return greater_specificnum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1409.066162109375}
{"code": "def parabola_focus(a, b, c):\n    focus = ((-b / (2 * a)), (((4 * a * c) - (b * b) + 1) / (4 * a)))\n    return focus\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1589.628173828125}
{"code": "import re\n\n\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return \"Matched!\"\n        else:\n            return \"Not Matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1656.105224609375}
{"code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0:\n        return 0\n    elif X[m - 1] == Y[n - 1]:\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1)\n    else:\n        return max(\n            longest_common_subsequence(X, Y, m, n - 1),\n            longest_common_subsequence(X, Y, m - 1, n),\n        )\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1810.650146484375}
{"code": "def prod_Square(n):\n    for i in range(2, (n) + 1):\n        if i * i < (n + 1):\n            for j in range(2, n + 1):\n                if (i * i * j * j) == n:\n                    return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1683.7122802734375}
{"code": "def first_Missing_Positive(arr, n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return 1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return i + 1\n    return n + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1715.8233642578125}
{"code": "def check_monthnumber(monthname3):\n    if (\n        monthname3 == \"April\"\n        or monthname3 == \"June\"\n        or monthname3 == \"September\"\n        or monthname3 == \"November\"\n    ):\n        return True\n    else:\n        return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1935.2156982421875}
{"code": "def count_Intgral_Points(x1, y1, x2, y2):\n    return (y2 - y1 - 1) * (x2 - x1 - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2063.330322265625}
{"code": "def check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str:\n        if i.isalpha():\n            flag_l = True\n        if i.isdigit():\n            flag_n = True\n    return flag_l and flag_n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2049.820556640625}
{"code": "def remove_tuple(test_tup):\n    res = tuple(set(test_tup))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2031.1304931640625}
{"code": "def octal_To_Decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1966.3856201171875}
{"code": "def first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1892.8380126953125}
{"code": "def remove_tuples(test_list, K):\n    res = [ele for ele in test_list if len(ele) != K]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1912.4830322265625}
{"code": "def find_exponentio(test_tup1, test_tup2):\n    res = tuple(ele1**ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1802.397705078125}
{"code": "import math\n\n\ndef largest_triangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b)\n    return area\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1661.4337158203125}
{"code": "def highest_Power_of_2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0:\n            res = i\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1697.439453125}
{"code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1730.428955078125}
{"code": "def chkList(lst):\n    return len(set(lst)) == 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1622.4505615234375}
{"code": "def remove_even(str1):\n    str2 = \"\"\n    for i in range(1, len(str1) + 1):\n        if i % 2 != 0:\n            str2 = str2 + str1[i - 1]\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1678.1483154296875}
{"code": "def hamming_Distance(n1, n2):\n    x = n1 ^ n2\n    setBits = 0\n    while x > 0:\n        setBits += x & 1\n        x >>= 1\n    return setBits\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1578.9010009765625}
{"code": "def inversion_elements(test_tup):\n    res = tuple(list(map(lambda x: ~x, list(test_tup))))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1554.8372802734375}
{"code": "def count(s, c):\n    res = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            res = res + 1\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1648.8919677734375}
{"code": "def concatenate_elements(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1352.5933837890625}
{"code": "def find_longest_repeating_subseq(str):\n    n = len(str)\n    dp = [[0 for k in range(n + 1)] for l in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[n][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1303.4730224609375}
{"code": "import heapq as hq\n\n\ndef heap_replace(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1230.927978515625}
{"code": "import re\n\n\ndef is_decimal(num):\n    num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    result = num_fetch.search(num)\n    return bool(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1660.876220703125}
{"code": "def count_Num(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1322.92626953125}
{"code": "import math\n\n\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i * i * i * i)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1324.861083984375}
{"code": "import re\n\n\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r\"[^a-zA-Z0-9.]\")\n    string = get_char.search(string)\n    return not bool(string)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1708.34130859375}
{"code": "def concatenate_strings(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1452.9261474609375}
{"code": "import math\n\n\ndef degree_radian(radian):\n    degree = radian * (180 / math.pi)\n    return degree\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1446.4876708984375}
{"code": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n\n    return [x for g in alist for x, R in aux(g) for i in R]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1350.1591796875}
{"code": "def check_subset_list(list1, list2):\n    l1, l2 = list1[0], list2[0]\n    exist = True\n    for i in list2:\n        if i not in list1:\n            exist = False\n    return exist\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1655.3577880859375}
{"code": "import math\n\n\ndef min_Operations(A, B):\n    if A > B:\n        swap(A, B)\n    B = B // math.gcd(A, B)\n    return B - 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1501.4881591796875}
{"code": "def first_Repeated_Char(str):\n    h = {}\n    for ch in str:\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return \"\\0\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1653.8138427734375}
{"code": "def first_even(nums):\n    first_even = next((el for el in nums if el % 2 == 0), -1)\n    return first_even\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1531.9449462890625}
{"code": "def extract_min_max(test_tup, K):\n    res = []\n    test_tup = list(test_tup)\n    temp = sorted(test_tup)\n    for idx, val in enumerate(temp):\n        if idx < K or idx >= len(temp) - K:\n            res.append(val)\n    res = tuple(res)\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1759.61376953125}
{"code": "import re\n\n\ndef replace_max_specialchar(text, n):\n    return re.sub(\"[ ,.]\", \":\", text, n)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1803.2581787109375}
{"code": "def check_type(test_tuple):\n    res = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            res = False\n            break\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1767.9248046875}
{"code": "def is_majority(arr, n, x):\n    i = binary_search(arr, 0, n - 1, x)\n    if i == -1:\n        return False\n    if ((i + n // 2) <= (n - 1)) and arr[i + n // 2] == x:\n        return True\n    else:\n        return False\n\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and (arr[mid] == x):\n            return mid\n        elif x > arr[mid]:\n            return binary_search(arr, (mid + 1), high, x)\n        else:\n            return binary_search(arr, low, (mid - 1), x)\n    return -1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1687.0972900390625}
{"code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1487.75}
{"code": "def find_Min(arr, low, high):\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high -= 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return arr[high]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1450.945556640625}
{"code": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1694.775634765625}
{"code": "def min_of_three(a, b, c):\n    if (a <= b) and (a <= c):\n        smallest = a\n    elif (b <= a) and (b <= c):\n        smallest = b\n    else:\n        smallest = c\n    return smallest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1581.94970703125}
{"code": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1)\n    new_num = n & num\n    if new_num == 0:\n        return True\n    return False\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1544.62841796875}
{"code": "def re_arrange_array(arr, n):\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j = j + 1\n    return arr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1623.26904296875}
{"code": "def max_sum(tri, n):\n    if n > 1:\n        tri[1][1] = tri[1][1] + tri[0][0]\n        tri[1][0] = tri[1][0] + tri[0][0]\n    for i in range(2, n):\n        tri[i][0] = tri[i][0] + tri[i - 1][0]\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1]\n        for j in range(1, i):\n            if tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]:\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1]\n            else:\n                tri[i][j] = tri[i][j] + tri[i - 1][j]\n    return max(tri[n - 1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1574.34228515625}
{"code": "def replace_blank(str1, char):\n    str2 = str1.replace(\" \", char)\n    return str2\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1626.951171875}
{"code": "import heapq\n\n\ndef larg_nnum(list1, n):\n    largest = heapq.nlargest(n, list1)\n    return largest\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1699.6920166015625}
{"code": "def lateralsuface_cylinder(r, h):\n    lateralsurface = 2 * 3.1415 * r * h\n    return lateralsurface\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1844.5625}
{"code": "def volume_cube(l):\n    volume = l * l * l\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1732.7525634765625}
{"code": "def even_bit_set_number(n):\n    count = 0\n    res = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res |= 1 << count\n        count += 1\n        temp >>= 1\n    return n | res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1864.5146484375}
{"code": "def No_of_Triangle(N, K):\n    if N < K:\n        return -1\n    else:\n        Tri_up = 0\n        Tri_up = ((N - K + 1) * (N - K + 2)) // 2\n        Tri_down = 0\n        Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) // 2\n        return Tri_up + Tri_down\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1839.9510498046875}
{"code": "from collections import Counter\n\n\ndef check_occurences(test_list):\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1810.48828125}
{"code": "def get_total_number_of_sequences(m, n):\n    T = [[0 for i in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                T[i][j] = 0\n            elif i < j:\n                T[i][j] = 0\n            elif j == 1:\n                T[i][j] = i\n            else:\n                T[i][j] = T[i - 1][j] + T[i // 2][j - 1]\n    return T[m][n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1763.0570068359375}
{"code": "def number_of_substrings(str):\n    str_len = len(str)\n    return int(str_len * (str_len + 1) / 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1842.5877685546875}
{"code": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    replace_list = list1\n    return replace_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1809.5462646484375}
{"code": "def array_3d(m, n, o):\n    array_3d = [[[\"*\" for col in range(m)] for col in range(n)] for row in range(o)]\n    return array_3d\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1878.457763671875}
{"code": "def count_charac(str1):\n    total = 0\n    for i in str1:\n        total = total + 1\n    return total\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1819.326904296875}
{"code": "import math\n\n\ndef next_Perfect_Square(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1921.1090087890625}
{"code": "def sort_on_occurence(lst):\n    dct = {}\n    for i, j in lst:\n        dct.setdefault(i, []).append(j)\n    return [(i, *dict.fromkeys(j), len(j)) for i, j in dct.items()]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1957.467529296875}
{"code": "def max_sum(arr, n):\n    MSIBS = arr[:]\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]:\n                MSIBS[i] = MSIBS[j] + arr[i]\n    MSDBS = arr[:]\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]:\n                MSDBS[-i] = MSDBS[-j] + arr[-i]\n    max_sum = float(\"-Inf\")\n    for i, j, k in zip(MSIBS, MSDBS, arr):\n        max_sum = max(max_sum, i + j - k)\n    return max_sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2000.9598388671875}
{"code": "def babylonian_squareroot(number):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1959.26123046875}
{"code": "def lps(str):\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    return L[0][n - 1]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1888.8406982421875}
{"code": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2026.669921875}
{"code": "def intersection_array(array_nums1, array_nums2):\n    result = list(filter(lambda x: x in array_nums1, array_nums2))\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1904.9730224609375}
{"code": "def count_X(tup, x):\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count = count + 1\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1934.722900390625}
{"code": "import cmath\n\n\ndef convert(numbers):\n    num = cmath.polar(numbers)\n    return num\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1791.2249755859375}
{"code": "def insert_element(list, element):\n    list = [v for elt in list for v in (element, elt)]\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1816.731689453125}
{"code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1708.75048828125}
{"code": "from itertools import combinations_with_replacement\n\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1786.4102783203125}
{"code": "import re\n\n\ndef words_ae(text):\n    list = re.findall(\"[ae]\\w+\", text)\n    return list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "errors": ["Traceback (most recent call last):", "  File \"/code/test.py\", line 10, in <module>", "    assert result == ['assert', 'atement']", "AssertionError"]}], "exec_time_ms": 1946.3057861328125}
{"code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1726.198486328125}
{"code": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return (a, b)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1735.05615234375}
{"code": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: (x % 2 != 0), array_nums)))\n    return count_odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1850.4180908203125}
{"code": "def maximize_elements(test_tup1, test_tup2):\n    res = tuple(\n        tuple(max(a, b) for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1816.5518798828125}
{"code": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1834.9232177734375}
{"code": "def division_elements(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1830.941650390625}
{"code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1818.7730712890625}
{"code": "def merge_dict(d1, d2):\n    d = d1.copy()\n    d.update(d2)\n    return d\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1783.27392578125}
{"code": "def dog_age(h_age):\n    if h_age < 0:\n        exit()\n    elif h_age <= 2:\n        d_age = h_age * 10.5\n    else:\n        d_age = 21 + (h_age - 2) * 4\n    return d_age\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1873.552978515625}
{"code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1894.1319580078125}
{"code": "def lateralsurface_cube(l):\n    LSA = 4 * (l * l)\n    return LSA\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1770.8289794921875}
{"code": "def square_Sum(n):\n    return int(n * (4 * n * n - 1) / 3)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1764.9178466796875}
{"code": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1820.25390625}
{"code": "def ascii_value(k):\n    ch = k\n    return ord(ch)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1954.416015625}
{"code": "def sum_even_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1931.7906494140625}
{"code": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum = sum + (j * j * j * j * j)\n    return sum\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1822.7503662109375}
{"code": "def rear_extract(test_list):\n    res = [lis[-1] for lis in test_list]\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1723.3731689453125}
{"code": "def substract_elements(test_tup1, test_tup2):\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1720.0760498046875}
{"code": "import math\n\n\ndef even_binomial_Coeff_Sum(n):\n    return 1 << (n - 1)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1761.6536865234375}
{"code": "import math as mt\n\n\ndef get_Position(a, n, m):\n    for i in range(n):\n        a[i] = a[i] // m + (a[i] % m != 0)\n    result, maxx = -1, -1\n    for i in range(n - 1, -1, -1):\n        if maxx < a[i]:\n            maxx = a[i]\n            result = i\n    return result + 1\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1704.2078857421875}
{"code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r * r * h\n    return volume\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1844.807861328125}
{"code": "def dict_filter(dict, n):\n    result = {key: value for (key, value) in dict.items() if value >= n}\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1864.2347412109375}
{"code": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1749.1688232421875}
{"code": "def count_first_elements(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1824.56298828125}
{"code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1849.5816650390625}
{"code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1844.1591796875}
{"code": "def sub_list(nums1, nums2):\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1832.213623046875}
{"code": "def validate(n):\n    for i in range(10):\n        temp = n\n        count = 0\n        while temp:\n            if temp % 10 == i:\n                count += 1\n            if count > i:\n                return False\n            temp //= 10\n    return True\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1846.171142578125}
{"code": "def check_element(list, element):\n    check_element = all(v == element for v in list)\n    return check_element\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2011.424072265625}
{"code": "import re\n\n\ndef text_match_two_three(text):\n    patterns = \"ab{2,3}\"\n    if re.search(patterns, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2173.763427734375}
{"code": "def max_sub_array_sum_repeated(a, n, k):\n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n * k):\n        max_ending_here = max_ending_here + a[i % n]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1994.158935546875}
{"code": "def modular_inverse(arr, N, P):\n    current_element = 0\n    for i in range(0, N):\n        if (arr[i] * arr[i]) % P == 1:\n            current_element = current_element + 1\n    return current_element\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1992.939208984375}
{"code": "def square_Sum(n):\n    return int(2 * n * (n + 1) * (2 * n + 1) / 3)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2074.39990234375}
{"code": "def odd_Days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap\n    if hund1:\n        ordd += hund1\n        leap -= hund1\n    if hund4:\n        ordd -= hund4\n        leap += hund4\n    days = ordd + leap * 2\n    odd = days % 7\n    return odd\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1987.8707275390625}
{"code": "def max_length(list1):\n    max_length = max(len(x) for x in list1)\n    max_list = max((x) for x in list1)\n    return (max_length, max_list)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2369.648193359375}
{"code": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    total = k\n    mod = 1000000007\n    dp[1] = k\n    dp[2] = k * k\n    for i in range(3, n + 1):\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod\n    return dp[n]\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2361.703857421875}
{"code": "def find(n, m):\n    q = n // m\n    return q\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2408.992919921875}
{"code": "import math\n\n\ndef otherside_rightangle(w, h):\n    s = math.sqrt((w * w) + (h * h))\n    return s\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2230.797607421875}
{"code": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    return max_val\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2235.893798828125}
{"code": "def get_Inv_Count(arr, n):\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2302.480712890625}
{"code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i) == 0:\n            divisors.append(i)\n    return sum(divisors)\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2320.700927734375}
{"code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1830.7464599609375}
{"code": "def flatten_list(list1):\n    result_list = []\n    if not list1:\n        return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num:\n            stack.append(c_num)\n        if isinstance(next, list):\n            if next:\n                stack.append(list(next))\n        else:\n            result_list.append(next)\n    result_list.reverse()\n    return result_list\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 2415.085693359375}
{"code": "from collections import defaultdict\n\n\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1965.3360595703125}
{"code": "def count_binary_seq(n):\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1):\n        nCr = (nCr * (n + 1 - r)) / r\n        res += nCr * nCr\n    return res\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1931.435791015625}
{"code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n", "syntax_ok": true, "test_results": [{"caseId": "case_0", "passed": true}, {"caseId": "case_1", "passed": true}, {"caseId": "case_2", "passed": true}], "exec_time_ms": 1794.7330322265625}
